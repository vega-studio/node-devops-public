#!/usr/bin/env bun
// @bun
import{createRequire as f9} from"node:module";var k9=Object.create;var{defineProperty:u1,getPrototypeOf:P9,getOwnPropertyNames:y9}=Object;var v9=Object.prototype.hasOwnProperty;var m9=($,Y,K)=>{K=$!=null?k9(P9($)):{};const Z=Y||!$||!$.__esModule?u1(K,"default",{value:$,enumerable:!0}):K;for(let G of y9($))if(!v9.call(Z,G))u1(Z,G,{get:()=>$[G],enumerable:!0});return Z};var F1=($,Y)=>()=>(Y||$((Y={exports:{}}).exports,Y),Y.exports);var C=($,Y)=>{for(var K in Y)u1($,K,{get:Y[K],enumerable:!0,configurable:!0,set:(Z)=>Y[K]=()=>Z})};var L=($,Y)=>()=>($&&(Y=$($=0)),Y);var k=f9(import.meta.url);var z;var O=L(()=>{z={cyan:(...$)=>`\x1B[36m${$.join(" ")}\x1B[0m`,red:(...$)=>`\x1B[31m${$.join(" ")}\x1B[0m`,yellow:(...$)=>`\x1B[33m${$.join(" ")}\x1B[0m`,green:(...$)=>`\x1B[32m${$.join(" ")}\x1B[0m`,blue:(...$)=>`\x1B[34m${$.join(" ")}\x1B[0m`,magenta:(...$)=>`\x1B[35m${$.join(" ")}\x1B[0m`,cyanBright:(...$)=>`\x1B[96m${$.join(" ")}\x1B[0m`,redBright:(...$)=>`\x1B[91m${$.join(" ")}\x1B[0m`,yellowBright:(...$)=>`\x1B[93m${$.join(" ")}\x1B[0m`,greenBright:(...$)=>`\x1B[92m${$.join(" ")}\x1B[0m`,blueBright:(...$)=>`\x1B[94m${$.join(" ")}\x1B[0m`,magentaBright:(...$)=>`\x1B[95m${$.join(" ")}\x1B[0m`,whiteBright:(...$)=>`\x1B[97m${$.join(" ")}\x1B[0m`,gray:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,grey:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,white:(...$)=>`\x1B[37m${$.join(" ")}\x1B[0m`,black:(...$)=>`\x1B[30m${$.join(" ")}\x1B[0m`,blackBright:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,bgCyan:(...$)=>`\x1B[46m${$.join(" ")}\x1B[0m`,bgRed:(...$)=>`\x1B[41m${$.join(" ")}\x1B[0m`,bgYellow:(...$)=>`\x1B[43m${$.join(" ")}\x1B[0m`,bgGreen:(...$)=>`\x1B[42m${$.join(" ")}\x1B[0m`,bgBlue:(...$)=>`\x1B[44m${$.join(" ")}\x1B[0m`,bgMagenta:(...$)=>`\x1B[45m${$.join(" ")}\x1B[0m`,bgCyanBright:(...$)=>`\x1B[106m${$.join(" ")}\x1B[0m`,bgRedBright:(...$)=>`\x1B[101m${$.join(" ")}\x1B[0m`,bgYellowBright:(...$)=>`\x1B[103m${$.join(" ")}\x1B[0m`,bgGreenBright:(...$)=>`\x1B[102m${$.join(" ")}\x1B[0m`,bgBlueBright:(...$)=>`\x1B[104m${$.join(" ")}\x1B[0m`,bgMagentaBright:(...$)=>`\x1B[105m${$.join(" ")}\x1B[0m`,cyanBrightBold:(...$)=>`\x1B[96m\x1B[1m${$.join(" ")}\x1B[0m`,redBrightBold:(...$)=>`\x1B[91m\x1B[1m${$.join(" ")}\x1B[0m`,yellowBrightBold:(...$)=>`\x1B[93m\x1B[1m${$.join(" ")}\x1B[0m`,greenBrightBold:(...$)=>`\x1B[92m\x1B[1m${$.join(" ")}\x1B[0m`,blueBrightBold:(...$)=>`\x1B[94m\x1B[1m${$.join(" ")}\x1B[0m`,magentaBrightBold:(...$)=>`\x1B[95m\x1B[1m${$.join(" ")}\x1B[0m`,whiteBrightBold:(...$)=>`\x1B[97m\x1B[1m${$.join(" ")}\x1B[0m`,grayBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`,greyBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`,whiteBold:(...$)=>`\x1B[37m\x1B[1m${$.join(" ")}\x1B[0m`,blackBold:(...$)=>`\x1B[30m\x1B[1m${$.join(" ")}\x1B[0m`,blackBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`}});import{stripIndent as g9} from"common-tags";function b($,...Y){return`${g9($,...Y)}\n\n`}var n=L(()=>{});function w0($){return $&&$.charCodeAt!==void 0}function f($){return $!==void 0&&$!==null}var G1=L(()=>{});import u9 from"inquirer";import{stripIndent as d9} from"common-tags";async function P($,Y,K){const{result:Z}=await u9.prompt([{type:"confirm",name:"result",message:d9`${$}`,default:Y}]);if(Z)K?.();return Z}var J1=L(()=>{});function L1($){return h1($)&&h1($.status)&&h1($.stderr)}var h1;var l1=L(()=>{h1=function($){return $!==void 0&&$!==null}});async function M1($,Y=[]){try{const K=Bun.spawnSync([$,...Y.filter(f)],{stdio:["inherit","inherit","inherit"],env:process.env});if(K.exitCode!==0){if(!M1.silent)console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.exitCode}`),console.error(new Error().stack);return!1}}catch(K){if(!M1.silent){if(L1(K))console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.status}`);else if(K instanceof Error)console.error(K.message);console.error(new Error().stack)}return!1}return!0}var M;var T=L(()=>{l1();G1();M1.silent=!1;M=M1});async function R(){if(Q1)return Q1;if(await M("bun",["--version"]))Q1=["bun","bunx"];else Q1=["npm","npx"];return Q1}var Q1;var s=L(()=>{T();Q1=null});async function E($){await new Promise((Y)=>setTimeout(Y,$))}var a=L(()=>{});import a9 from"fs-extra";import h from"path";async function t(){console.warn("Building Vite config using base:",z.yellowBrightBold(h.resolve("vite.config.ts")));let $=await(await import(h.resolve("vite.config.ts"))).default();const Y=await a9.readJSONSync(h.resolve("tsconfig.json"));return $={...$,logLevel:"info",mode:"development",root:h.resolve("app/client"),clearScreen:!0,build:{...$.build,cssCodeSplit:!0,outDir:h.resolve("build/client"),sourcemap:!0,rollupOptions:{output:{manualChunks:void 0}},watch:{...$.build?.watch,include:[...(Array.isArray($.build?.watch?.include)?$.build?.watch?.include:[$.build?.watch?.include])||[],...Y?.include?.map((K)=>h.resolve(K))||[],"tsconfig.json"].filter(Boolean)},emptyOutDir:!0},resolve:{alias:{config:h.resolve("app/config")}}},$}var b1=L(()=>{O()});import t9 from"deepmerge";import r9 from"fs-extra";import e9 from"path";async function u(){const $=r9.readJSONSync(e9.resolve("package.json"));return t9($.dependencies||{},$.peerDependencies||{})}var _1=L(()=>{});import $3 from"fs-extra";import Y3 from"path";async function U(){return $3.readJSONSync(Y3.resolve("package.json")).version||""}var y=L(()=>{});import*as P0 from"vite";import K3 from"fs-extra";import c1 from"path";async function z1(){if(process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await U(),console.warn(z.yellowBrightBold("Starting Vite client build...")),!K3.existsSync(c1.resolve("app/client/index.ts"))){console.warn("Tried to start development process for the app client, but no entry file was found.");return}const $=await t();$.root=c1.resolve("app/client"),$.build.outDir=c1.resolve("build/client"),$.build.rollupOptions.external=Object.keys(await u()),await P0.build($),console.warn(z.yellowBrightBold("Vite client build process started..."))}var p1=L(()=>{b1();O();_1();y()});function y0($){const Y=(K)=>(Z)=>{if($(K,Z),Z)process.exit(1);else process.exit(0)};process.on("exit",Y("exit")),process.on("SIGINT",Y("SIGINT")),process.on("SIGUSR1",Y("SIGUSR1")),process.on("SIGUSR2",Y("SIGUSR2")),process.on("SIGTERM",Y("SIGTERM")),process.on("uncaughtException",Y("uncaughtException"))}var v0=L(()=>{});function n1(...$){i1.push($),Z3()}var Z3,i1,m0;var f0=L(()=>{Z3=function(){if(m0!==null)return;m0=setInterval(()=>{while(i1.length>0){const $=i1.shift();if($)console.log(...$)}},400)};i1=[],m0=null});import G3 from"child_process";import s1 from"path";import J3 from"readline";async function X1($){console.warn("\nRunning the App server at: ",z.yellowBrightBold(s1.resolve("app/server")),"\n"),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await U(),process.env.RESOURCE_PATH=process.env.RESOURCE_PATH||s1.resolve("build/client");const Y=await R();if(Y[0]!=="bun")console.error("Currently only an environment with bun installed is supported for this command.");const K=G3.spawn(Y[0],["--watch",s1.resolve("app/server/index.ts")]);process.stdin.setRawMode?.(!0),process.stdin.resume(),process.stdin.setEncoding("utf8"),J3.emitKeypressEvents(process.stdin);let Z=!1;if(process.stdin.on("keypress",async(G,J)=>{if(J&&J.ctrl&&J.name==="c")K.kill(),process.exit(0);else if(J&&J.ctrl&&J.name==="d")K.kill(),process.exit(0);else if(G.toString()==="b"||G.toString()==="B"){if(Z)return;Z=!0,await z1(),Z=!1}else if(G.toString()==="q"||G.toString()==="Q")if(K.kill(),J.shift)process.exit(123);else process.exit(0)}),process.stdin.pipe(K.stdin),$)$(K);else K.stdout.on("data",function(G){n1(`${G.toString().slice(0,-1)}`)}),K.stderr.on("data",function(G){n1(`${G.toString().slice(0,-1)}`)});y0(async(G,J)=>{if(K.kill(),console.warn("EXIT BUILD SERVER"),console.warn(z.redBrightBold(G)),J&&J instanceof Error)console.warn(z.redBrightBold(J.stack||J.message));process.exit(0)})}var o1=L(()=>{p1();O();s();v0();f0();y()});var u0={};C(u0,{default:()=>{{return g0}}});async function g0(){process.env.NODE_ENV="development",z1(),console.warn(z.yellowBrightBold("Starting dev server...")),process.env.VITE_RELEASE_VERSION=await U(),await X1()}var d0=L(()=>{p1();o1();O();y()});import q1 from"path";import Q3 from"url";async function h0(){if(q1.basename(q1.resolve(a1,".."))==="dist")return q1.resolve(a1,"../../");return q1.resolve(a1,"../../../")}var a1;var l0=L(()=>{a1=Q3.fileURLToPath(new URL(".",import.meta.url))});async function l($,Y=[]){const K=await R();return M(K[0],["run",$,Y.length>0&&Y[0]!=="--"?"--":void 0,...Y])}var N1=L(()=>{T();s()});var r1={};C(r1,{default:()=>{{return c0}}});import t1 from"path";async function c0($,Y,...K){const Z=t1.resolve(".");process.env.PROJECT_ROOT=Z,process.env.VITE_RELEASE_VERSION=await U();const G=t1.resolve(".storybook"),J=await h0();if(process.chdir(J),Y&&Y.length>0)process.env.NODE_MODULES_STORIES=Y.join(",");if($==="build"){if(!l("storybook",["build","-c",G,"-o",`"${t1.resolve(Z,"storybook-static")}"`]))console.error(z.redBrightBold("Failed to build storybook"))}else if(!l("storybook",["dev","--no-version-updates","-p",process.env.PORT||"6006","-c",`"${G}"`]))console.error(z.redBrightBold("Failed to run storybook"))}var e1=L(()=>{O();l0();N1();y()});var Y0=F1((W5,i0)=>{var z3=function(){try{return p0.statSync("/.dockerenv"),!0}catch($){return!1}},X3=function(){try{return p0.readFileSync("/proc/self/cgroup","utf8").includes("docker")}catch($){return!1}},p0=import.meta.require("fs"),$0;i0.exports=()=>{if($0===void 0)$0=z3()||X3();return $0}});var o0=F1((B5,K0)=>{var W3=import.meta.require("os"),B3=import.meta.require("fs"),n0=Y0(),s0=()=>{if(process.platform!=="linux")return!1;if(W3.release().toLowerCase().includes("microsoft")){if(n0())return!1;return!0}try{return B3.readFileSync("/proc/version","utf8").toLowerCase().includes("microsoft")?!n0():!1}catch($){return!1}};if(process.env.__IS_WSL_TEST__)K0.exports=s0;else K0.exports=s0()});var t0=F1((H5,a0)=>{a0.exports=($,Y,K)=>{const Z=(G)=>Object.defineProperty($,Y,{value:G,enumerable:!0,writable:!0});return Object.defineProperty($,Y,{configurable:!0,enumerable:!0,get(){const G=K();return Z(G),G},set(G){Z(G)}}),$}});var G$=F1((F5,Z$)=>{var b3=function(){if(Z0===void 0)Z0=M3()||L3();return Z0},Y$=function($){if(typeof $==="string"||Array.isArray($))return $;const{[e0]:Y}=$;if(!Y)throw new Error(`${e0} is not supported`);return Y},Q0=function({[r]:$},{wsl:Y}){if(Y&&D1)return Y$(Y);if(!$)throw new Error(`${r} is not supported`);return Y$($)},__dirname="/Users/diniden/Desktop/VoidRay/dev-ops/node-devops/node_modules/open",H3=import.meta.require("path"),F3=import.meta.require("child_process"),{promises:A1,constants:K$}=import.meta.require("fs"),D1=o0(),L3=Y0(),G0=t0(),r0=H3.join(__dirname,"xdg-open"),{platform:r,arch:e0}=process,M3=()=>{try{return A1.statSync("/run/.containerenv"),!0}catch{return!1}},Z0,_3=(()=>{let Y;return async function(){if(Y)return Y;const K="/etc/wsl.conf";let Z=!1;try{await A1.access(K,K$.F_OK),Z=!0}catch{}if(!Z)return"/mnt/";const G=await A1.readFile(K,{encoding:"utf8"}),J=/(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(G);if(!J)return"/mnt/";return Y=J.groups.mountPoint.trim(),Y=Y.endsWith("/")?Y:`${Y}/`,Y}})(),$$=async($,Y)=>{let K;for(let Z of $)try{return await Y(Z)}catch(G){K=G}throw K},O1=async($)=>{if($={wait:!1,background:!1,newInstance:!1,allowNonzeroExitCode:!1,...$},Array.isArray($.app))return $$($.app,(X)=>O1({...$,app:X}));let{name:Y,arguments:K=[]}=$.app||{};if(K=[...K],Array.isArray(Y))return $$(Y,(X)=>O1({...$,app:{name:X,arguments:K}}));let Z;const G=[],J={};if(r==="darwin"){if(Z="open",$.wait)G.push("--wait-apps");if($.background)G.push("--background");if($.newInstance)G.push("--new");if(Y)G.push("-a",Y)}else if(r==="win32"||D1&&!b3()&&!Y){const X=await _3();if(Z=D1?`${X}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`:`${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`,G.push("-NoProfile","-NonInteractive","\u2013ExecutionPolicy","Bypass","-EncodedCommand"),!D1)J.windowsVerbatimArguments=!0;const W=["Start"];if($.wait)W.push("-Wait");if(Y){if(W.push(`"\`"${Y}\`""`,"-ArgumentList"),$.target)K.unshift($.target)}else if($.target)W.push(`"${$.target}"`);if(K.length>0)K=K.map((F)=>`"\`"${F}\`""`),W.push(K.join(","));$.target=Buffer.from(W.join(" "),"utf16le").toString("base64")}else{if(Y)Z=Y;else{const X=!__dirname||__dirname==="/";let W=!1;try{await A1.access(r0,K$.X_OK),W=!0}catch{}Z=process.versions.electron||r==="android"||X||!W?"xdg-open":r0}if(K.length>0)G.push(...K);if(!$.wait)J.stdio="ignore",J.detached=!0}if($.target)G.push($.target);if(r==="darwin"&&K.length>0)G.push("--args",...K);const Q=F3.spawn(Z,G,J);if($.wait)return new Promise((X,W)=>{Q.once("error",W),Q.once("close",(F)=>{if(!$.allowNonzeroExitCode&&F>0){W(new Error(`Exited with code ${F}`));return}X(Q)})});return Q.unref(),Q},J0=($,Y)=>{if(typeof $!=="string")throw new TypeError("Expected a `target`");return O1({...Y,target:$})},q3=($,Y)=>{if(typeof $!=="string")throw new TypeError("Expected a `name`");const{arguments:K=[]}=Y||{};if(K!==void 0&&K!==null&&!Array.isArray(K))throw new TypeError("Expected `appArguments` as Array type");return O1({...Y,app:{name:$,arguments:K}})},I1={};G0(I1,"chrome",()=>Q0({darwin:"google chrome",win32:"chrome",linux:["google-chrome","google-chrome-stable","chromium"]},{wsl:{ia32:"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",x64:["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe","/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]}}));G0(I1,"firefox",()=>Q0({darwin:"firefox",win32:"C:\\Program Files\\Mozilla Firefox\\firefox.exe",linux:"firefox"},{wsl:"/mnt/c/Program Files/Mozilla Firefox/firefox.exe"}));G0(I1,"edge",()=>Q0({darwin:"microsoft edge",win32:"msedge",linux:["microsoft-edge","microsoft-edge-dev"]},{wsl:"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"}));J0.apps=I1;J0.openApp=q3;Z$.exports=J0});async function A($,Y=[]){try{const K=Bun.spawnSync([$,...Y.filter(f)],{stdio:["inherit","pipe","pipe"],env:process.env});if(K.exitCode!==0)return console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.exitCode}`),console.error(new Error().stack),null;return(K.stdout||"").toString()}catch(K){if(L1(K))console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.status}`);else if(K instanceof Error)console.error(K.message);return console.error(new Error().stack),null}}var c=L(()=>{l1();G1()});function J$({template:$,options:Y,required:K,doubleCurlyBrackets:Z,onError:G,onToken:J}){const Q=new Map,X=new Map,W=new Map,F=new Map;let B=/\$\{([^\}]*)\}/g;if(Z)B=/\$\{\{([^\}]*)\}\}/g;const N=$.replace(B,(q,H)=>{let x="";if(F.set(H,(F.get(H)||0)+1),H in Y){Q.set(H,(Q.get(H)||0)+1);const I0=Y[H];if(I0!==void 0)x=I0}else X.set(H,(X.get(H)||0)+1);if(J){if(x=J(H,x),x!==H)Q.set(H,(Q.get(H)||0)+1),X.delete(H)}return x});Object.keys(Y).forEach((q)=>{if(!Q.get(q))W.set(q,(W.get(q)||0)+1)});const D={resolvedtemplateOptions:Q,template:N,templateProvidedOptions:F,unresolvedProvidedOptions:W,unresolvedTemplateOptions:X};if(K)K.values.forEach((q)=>{if(D.unresolvedProvidedOptions.get(q)){const H=`${K.name}: Could not resolve all the required inputs. Input: ${q}`;if(G)G(H);else console.error(H)}else if(D.unresolvedTemplateOptions.get(q)){const H=`${K.name}: A required option was not provided in the options parameter. Option: ${q}`;if(G)G(H);else console.error(H)}else if(!D.resolvedtemplateOptions.get(q)){const H=`${K.name}: A required option was not provided in the options parameter. Option: ${q}`;if(G)G(H);else console.error(H)}});return D}var Q$=L(()=>{});var M$={};C(M$,{default:()=>{{return L$}}});import x1 from"fs-extra";import z$ from"hostile";import F$ from"path";import X$ from"valid-url";async function D3(){const Y=x1.readJSONSync(F$.resolve("package.json")).hosts;if(!Y)return;const K=Object.keys(Y);let Z=await W$(z$,"get",!1);const G=[];console.warn(z.yellow("Updating hosts file..."));for(let Q of K)try{if(!Z.find((X)=>X[0]===Q&&X[1]===Y[Q]))G.push([Q,Y[Q]])}catch(X){if(X instanceof Error)console.warn(z.red(X.message))}if(G.length>0){console.warn(z.yellow("Adding hosts (You may be prompted for administrator password):\n\t",G.map((X)=>`${X[0]} => ${X[1]}`).join("\n\t"))),await M("sudo",["echo","Granted sudo access to update hosts file."]);const Q=await A("stat",["-f","%p","/etc/hosts"]).toString();await M("sudo",["chmod","666","/etc/hosts"]);for(let X of G)x1.appendFileSync("/etc/hosts",`${X[0]} ${X[1]}`);x1.appendFileSync("/etc/hosts","\n"),await M("sudo",["chmod",Q.substring(Q.length-4).trim(),"/etc/hosts"])}await E(500),console.warn(z.yellow("Verifying hosts file...")),Z=await W$(z$,"get",!1);let J=!1;if(G.forEach(([Q,X])=>{if(!Z.find((W)=>W[0]===Q&&W[1]===Y[Q]))J=!0,console.warn(z.redBright(`Failed to add host: ${z.yellowBright(Q)} => ${z.yellowBright(X)}`))}),J)console.warn(z.red(b`
        *************************************************************************
        * Some hosts specified in the package.json were not able to be written  *
        * to the hosts file for the system. You can amend this by editing the   *
        * file yourself, or by trying to run this script again as an admin.     *
        *************************************************************************
      `))}async function L$($,Y){const Z=x1.readJSONSync(F$.resolve("package.json"))?.url||{},G=Y?.reduce((Q,X,W)=>{return Q[`${W+1}`]=X,Q},{})||{};if(!$||$.length<=0){console.warn(b`
      Available URLs:
        ${z.cyanBrightBold(Object.keys(Z).join("\n        "))}
    `);return}await D3();const J={...process.env,...G};if(Array.isArray($))$.forEach((Q)=>{B$(Z,Q,J)});else B$(Z,$,J)}var H$,N3,W$,B$;var b$=L(()=>{H$=m9(G$(),1);O();n();T();c();Q$();a();N3=function($){return $&&typeof $==="function"},W$=function($,Y,...K){return new Promise((Z,G)=>{const J=$[Y];if(!N3(J)){G(new Error(`${String(Y)} is not a function`));return}J(...K,(Q,X)=>{if(Q)console.warn(Q),G(Q),process.exit(1);else Z(X||void 0)})})};B$=function($,Y,K){let Z=Y;if(X$.isWebUri(Y))Z=Y;else if($[Y])Z=$[Y];const G=J$({options:K,template:Z});if(G.unresolvedTemplateOptions.size>0)throw console.warn(z.red(b`
          You must specify these env variables for this URL to work:
          ${Array.from(G.unresolvedTemplateOptions.keys()).join("\n\t")}
        `)),new Error("Missing env configuration for URL");if(Z=G.template,X$.isWebUri(Z))console.warn("Navigating to:",z.cyanBrightBold(Z)),H$.default(Z);else console.warn("Can not open invalid URL:",z.redBrightBold(Z))}});import A3 from"child_process";async function e(){try{A3.execSync("git status --porcelain=v1 2>/dev/null | wc -l | grep 0",{env:process.env})}catch($){return!0}return!1}var U1=L(()=>{});async function V1($){if($){if(!await P(`
      Would you like to return back to development?
      Runs the following:
        git fetch
        git checkout dev
        git reset --hard origin/dev
    `))return}if(await e())return console.error("Can not return to dev branch as changes are present on the current branch."),!1;let Y=!1;if(!await M("git",["fetch"]))Y=!0;if(!await M("git",["checkout","dev"]))Y=!0;if(!await M("git",["reset","--hard","origin/dev"]))Y=!0;if(Y)return console.error("Could not return to dev branch."),!1;return!0}var z0=L(()=>{T();U1();J1()});import I from"fs-extra";import O3 from"ignore";import _ from"path";async function I3(){const $=await u();console.warn("Building full distribution...");let Y=await Bun.build({entrypoints:[_.resolve("./bin/main.ts")],target:"bun",external:Object.keys($),minify:!0,sourcemap:"inline"});for(let K of Y.outputs)console.warn("Writing bin bundle resource:",z.cyanBrightBold(K.path)),await Bun.write(_.resolve("./dist/bin",K.path),K);console.warn("Building gimped distribution..."),Y=await Bun.build({entrypoints:[_.resolve("./bin/main-gimp.ts")],target:"node",external:Object.keys($),minify:!0,sourcemap:"inline"});for(let K of Y.outputs)console.warn("Writing bin bundle resource:",z.cyanBrightBold(K.path)),await Bun.write(_.resolve("./dist/bin",K.path),K);console.warn("Copying entry cross-platform distribution..."),I.copyFileSync(_.resolve("./bin/main-entry.cjs"),_.resolve("./dist/bin/main-entry.cjs"))}async function x3(){if(!I.existsSync(_.resolve("./bin/shim")))console.error("No shim distribution files found to be built");if(I.existsSync(_.resolve("./shim")))I.removeSync(_.resolve("./shim"));const $=await u();console.warn("Building shim distribution...");const Y=await Bun.build({entrypoints:[_.resolve("./bin/shim/index.ts")],target:"node",external:Object.keys($),minify:!0});for(let Z of Y.outputs)console.warn("Writing shim bundle resource:",z.cyanBrightBold(Z.path)),await Bun.write(_.resolve("./shim/src/bin/shim",Z.path),Z);I.writeFileSync(_.resolve("./shim/index.js"),'export * from "./src/bin/shim/index.js";\n',{encoding:"utf-8"}),I.writeFileSync(_.resolve("./shim/index.d.ts"),'export * from "./src/bin/shim/index.d.ts";\n',{encoding:"utf-8"});const K=I.readJSONSync(_.resolve("tsconfig.json"));if(K.exclude=K.exclude||[],K.exclude.push("./bin/lib/**"),K.include=["./bin/shim"],I.writeJSONSync(_.resolve("tsconfig.temp.json"),K),await E(500),!M("tsc",["-d","--emitDeclarationOnly","--pretty","--outDir",_.resolve("./shim/src/bin"),"--project",_.resolve("tsconfig.temp.json")]))console.warn("Failed to compile type declarations for the shim files."),I.removeSync(_.resolve("tsconfig.temp.json")),process.exit(1);I.removeSync(_.resolve("tsconfig.temp.json"))}async function U3(){console.warn(z.yellowBright("Copying template files for bin distribution"));const $=_.resolve(__dirname,"../../template"),Y=_.resolve("./dist/bin/template");I.copySync($,Y);const K=I.readdirSync(Y).map((J)=>_.resolve(Y,J,"index.ts")).filter((J)=>{if(I.existsSync(J))return!0}),Z=await u();let G=!1;for(let J of K){const Q=await Bun.build({entrypoints:[J],target:"bun",external:Object.keys(Z),minify:!0});if(!Q.success){console.error(z.redBrightBold("Build failed for template:"),z.cyanBrightBold(_.relative(Y,_.dirname(J))));for(let X of Q.logs)console.error(X);G=!0}for(let X of Q.outputs)console.warn("Writing template entry file:",z.cyanBrightBold(_.relative(Y,_.resolve(_.dirname(J),X.path)))),await Bun.write(_.resolve(_.dirname(J),X.path),X)}if(G)console.error(z.redBrightBold("Some templates have errors (see above), stopping the build process.")),process.exit(1)}async function V3(){console.warn(z.yellowBright("Copying entry shell script for bin distribution")),I.copySync(_.resolve("./bin/main-entry.sh"),_.resolve("./dist/bin/main-entry.sh")),I.copySync(_.resolve("./bin/main-entry.ps1"),_.resolve("./dist/bin/main-entry.ps1"))}async function q$(){if(console.warn(z.cyanBright("Building bin commands for the distribution.")),!I.existsSync(_.resolve("./bin/main.ts"))||!I.existsSync(_.resolve("./bin/main-entry.sh"))||X0.ignores("bin")){console.warn(`Tried to make a release for the bin commands, but no bin/main.ts or bin/main.sh entry file was found. (or was gitignored):\n\t${_.resolve("./bin/main.ts")}\n\t${_.resolve("./bin/main.sh")}`);return}I.ensureDirSync(_.resolve("./dist")),I.ensureDirSync(_.resolve("./dist/bin/template")),await I3(),await x3(),await U3(),await V3()}var __dirname,_$,X0;var N$=L(()=>{O();T();_1();a();__dirname="/Users/diniden/Desktop/VoidRay/dev-ops/node-devops/bin/lib/build/bin",_$=_.resolve(".gitignore"),X0=O3.default();if(I.existsSync(_$))X0=X0.add(I.readFileSync(_$).toString())});import D$ from"fs";import A$ from"path";function O$($){return{name:"vite-devops-string-replace-plugin",enforce:"pre",load(Y){const K=A$.resolve(Y),Z=[".ts",".js",".tsx",".jsx"];if(D$.existsSync(K)&&Z.includes(A$.extname(K))&&!K.includes("node_modules")&&!K.includes("\0")){let G=D$.readFileSync(K,{encoding:"utf-8"});return $.forEach((J)=>{G=G.replace(J.from,J.to)}),G}}}}var I$=L(()=>{});import S from"fs-extra";import j from"path";function x$($){const Y=process.env.PROJECT_ROOT||".",K=j.resolve(Y,"app/config");if(!S.existsSync(K)){console.warn(`viteDevopsAppConfigPlugin: ${z.cyanBrightBold("No app/config folder found.")}`);return}try{const Z=S.readdirSync(K).filter((B)=>{return S.statSync(j.join(K,B)).isDirectory()}),G=Z.map((B)=>j.join(K,B)),Q=Z.map((B,N)=>{if(!$)if(S.existsSync(j.join(G[N],`${B}.local`))||S.existsSync(j.join(G[N],`${B}.local.js`))||S.existsSync(j.join(G[N],`${B}.local.ts`))||S.existsSync(j.join(G[N],`${B}.local.tsx`))||S.existsSync(j.join(G[N],`${B}.local.jsx`)))return[{from:`"config/${B}/${B}"`,to:`"config/${B}/${B}.local"`},{from:`"config/${B}/${B}.js"`,to:`"config/${B}/${B}.local.js"`},{from:`"config/${B}/${B}.ts"`,to:`"config/${B}/${B}.local.ts"`}];else return[];return[{from:`"config/${B}/${B}"`,to:`"config/${B}/${B}.${$}"`},{from:`"config/${B}/${B}.js"`,to:`"config/${B}/${B}.${$}.js"`},{from:`"config/${B}/${B}.ts"`,to:`"config/${B}/${B}.${$}.ts"`}]}).reduce((B,N)=>B.concat(N),[]),F=[...!$&&(S.existsSync(j.join(K,"env.local"))||S.existsSync(j.join(K,"env.local.js"))||S.existsSync(j.join(K,"env.local.ts"))||S.existsSync(j.join(K,"env.local.tsx"))||S.existsSync(j.join(K,"env.local.jsx")))?[{from:'"config/env"',to:'"config/env.local"'},{from:'"config/env.js"',to:'"config/env.local.js"'},{from:'"config/env.ts"',to:'"config/env.local.ts"'}]:$?[{from:'"config/env"',to:`"config/env.${$}"`},{from:'"config/env.js"',to:`"config/env.${$}.js"`},{from:'"config/env.ts"',to:`"config/env.${$}.ts"`}]:[],...Q];if(F.length>0)console.warn(`

  ${z.yellowBrightBold("Using the following mappings for app config:")}

  \t${z.cyanBrightBold(F.map((B)=>`\n  ${B.from} => ${B.to}`).join("\n\t"))}

      `);return O$(F)}catch(Z){console.error(Z),console.error(z.redBrightBold(`
      App config plugin failed to load. The default config paths will be used
      and any specific environment requested will be ignored.
    `))}}var U$=L(()=>{O();I$()});import*as T$ from"vite";import T1 from"fs-extra";import T3 from"ignore";import $1 from"path";async function w$($){if(console.warn(z.cyanBright("Building client files for the distribution.")),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await U(),process.env.FORCE_BUILD!=="true"){if(!T1.existsSync($1.resolve("app/client"))||W0.ignores("app/client")){console.error(`Tried to make a release for the web app client, but no app/client entry file was found. (or was gitignored):\n\t${$1.resolve("app/client")}`);return}}const Y="development";process.env.NODE_ENV="production",console.warn(`Releasing ${z.yellowBrightBold("app/client")} for Environment:`,z.cyanBrightBold($)),process.env.BUILD_ENV=$;const K=await t();if(K.plugins=[x$($),...K.plugins||[]],K.logLevel="warn",K.mode="production",K.root=$1.resolve("app/client"),K.build.outDir=$1.resolve("dist/app/client",$),K.build.watch=void 0,K.build.rollupOptions.output={dir:K.build.outDir,entryFileNames:"index.js",chunkFileNames:"index.js",manualChunks:void 0},await T$.build(K),process.env.NODE_ENV=Y,!T1.existsSync($1.resolve(`dist/app/client/${$}/index.js`)))console.error("\n\nFailed to create Client output bundle. Exiting process...\n\n"),process.exit(1)}var V$,W0;var C$=L(()=>{b1();O();y();U$();V$=$1.resolve(".gitignore"),W0=T3.default();if(T1.existsSync(V$))W0=W0.add(T1.readFileSync(V$).toString())});async function Y1($=[]){const Y=await R();if(Y1.optimize){if(Y[1]==="bunx")return M(Y[1],["--bun",...$])}return M(Y[1],[...$])}var B0=L(()=>{T();s();Y1.optimize=!0});import w1 from"fs-extra";import W1 from"path";async function C1(){if(!w1.existsSync(W1.resolve("ui")))return;w1.ensureDir(W1.resolve("dist/types")),console.warn(z.yellowBrightBold("Generating .d.ts files...")),Y1(["tsc","--emitDeclarationOnly","--declaration","--outDir","dist/types","--project",W1.resolve("tsconfig.json")]);const $=w1.readdirSync(W1.resolve("dist/types"));for(let Y of $){if(Y==="ui"||Y==="util")continue;console.warn(z.yellowBright(`Removing types for folder: ${Y}`)),w1.removeSync(W1.resolve("dist/types",Y))}}var H0=L(()=>{O();B0()});import w3 from"fs-extra";import C3 from"path";async function S$(){return w3.readJSONSync(C3.resolve("package.json")).name||""}var j$=L(()=>{});import*as R$ from"vite";import S1 from"fs";import S3 from"ignore";import d from"path";async function k$(){if(console.warn(z.cyanBright("Copying ui files for the distribution.")),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await U(),!process.env.FORCE_BUILD){if(!S1.existsSync(d.resolve("ui"))||F0.ignores("ui")){console.error(`"No library project found (or was gitignored) for bundling release at:\n\t${d.resolve("ui")}`);return}}if(console.warn(z.yellowBrightBold("Starting Vite client build...")),!S1.existsSync(d.resolve("ui/index.ts"))){console.error("The UI folder project has no index.ts entry point to create the library.");return}await C1(),console.warn(z.yellowBrightBold("Building library bundle..."));const $=await t();$.logLevel="warn",$.root=d.resolve("ui"),$.build.lib={entry:d.resolve("ui/index.ts"),name:(await S$()).split("@").join("").split("/").join("_"),fileName:"index"},$.mode="production",$.root=d.resolve("app/client"),$.build.outDir=d.resolve("dist/ui"),$.build.watch=void 0,$.build.rollupOptions.output={dir:$.build.outDir,entryFileNames:"index.js",chunkFileNames:"index.js",manualChunks:void 0};const Y=Object.keys(await u());console.warn("Externalized Libraries that will not be included in the bundle:",Y),$.build.rollupOptions={...$.build.rollupOptions,external:Y},await R$.build($)}var E$,F0;var P$=L(()=>{b1();O();H0();_1();j$();y();E$=d.resolve(".gitignore"),F0=S3.default();if(S1.existsSync(E$))F0=F0.add(S1.readFileSync(E$).toString())});import p from"fs-extra";import v from"path";async function y$(){process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await U(),console.warn(z.cyanBright("Copying story files for the distribution."));const $=v.resolve("dist/stories"),Y=v.resolve("ui/stories"),K=v.resolve("dist");if(!p.existsSync(Y)){console.error(`Could not find stories directory:\n\t${Y}`);return}p.ensureDirSync($),p.copySync(Y,$);const Z=v.resolve("package.json"),J={name:p.readJSONSync(Z).name||"unknown",private:!0,type:"module",main:"./ui/index.js",types:"./types/ui/index.d.ts",dependencies:{},repository:{},scripts:{},devDependencies:{}};console.warn("Writing distribution package.json:",v.resolve(K,"package.json")),p.writeJSONSync(v.resolve(K,"package.json"),J),await E(500),p.ensureDirSync(v.resolve(K,"components")),J.main="../ui/index.js",J.types="../types/ui/index.d.ts",console.warn("Writing distribution package.json:",v.resolve(K,"components/package.json")),p.writeJSONSync(v.resolve(K,"components/package.json"),J),await E(500),console.warn("Finished copying stories.")}var v$=L(()=>{O();y();a()});var m$={};C(m$,{default:()=>{{return E1}}});import j1 from"fs-extra";import K1 from"path";async function j3(){if(process.env.QUICK_BUILD==="true")return;if(await l("release",["view"]),!await P("\nShould the release continue being made?"))await V1(!0),process.exit(1)}async function E3(){console.warn("Gathering build targets from:",z.yellowBright(K1.resolve("build.conf.js")));const $=(await import(K1.resolve("build.conf.js"))).BUILD_TARGETS;if(process.env.NODE_ENV="production",console.warn("Building environments",z.redBrightBold(JSON.stringify($))),!Array.isArray($))console.error("build.conf.js must be an array of string values"),process.exit(1);for(let Y of $)await w$(Y);await k$(),await y$(),await q$()}async function R3(){try{j1.removeSync(K1.resolve("dist"))}catch($){console.warn("No dist folder to clean out.")}j1.ensureDirSync(K1.resolve("dist"))}async function k3(){try{j1.removeSync(K1.resolve("dist/test"))}catch($){console.warn("No test folder to clean out")}try{j1.removeSync(K1.resolve("dist/unit-test"))}catch($){console.warn("No unit-test folder to clean out")}}async function E1(){console.warn("Validating the release..."),await j3(),console.warn("Clear previous build..."),await R3(),console.warn("Bundling project..."),await E3(),console.warn("Final cleanup..."),await k3(),console.warn("Release Build complete!")}var L0=L(()=>{O();N1();z0();J1();N$();C$();P$();v$()});var h$={};C(h$,{default:()=>{{return k1}}});import u$ from"fs-extra";import P3 from"lodash/groupBy.js";import R1 from"path";import y3 from"lodash/uniq.js";import v3 from"lodash/upperFirst.js";import{compare as m3,inc as f3} from"semver";async function l3($){console.warn("Building release notes..."),console.warn("fetching tags...");const Y=await A("git",["tag","--list"]);if(Y===null)console.error("Could not get git tags"),process.exit(1);const K=Y.trim().split("\n").sort(m3),Z=K[(K.includes($)?K.indexOf($):K.length)-1];console.warn("fetching version hash...");const G=await A("git",["rev-list","-1",`${$}`]);if(G===null)console.error("Couldn't get current version hash"),process.exit(1);const J=G.trim();console.warn("fetching previous version hash...");let Q=await A("git",["rev-list","-1",`${Z}`]);if(Q===null){if(Q=await A("git",["rev-list","--max-parents=0","HEAD"]),Q===null)console.error("Couldn't get previous version hash"),process.exit(1)}const X=Q.trim();console.warn("fetching logs...");const W=await A("git",["log","--pretty=%B",`${X}...${J}`]);if(W===null)console.error("Couldn't get logs"),process.exit(1);const F=W.split("\n").map((D)=>{const[,q="",H=""]=D.match(/^\s*(\w+?)\s*:\s*(.*)\s*$/)||[];return{tag:d$[q.toLowerCase()],message:v3(H)}}).filter((D)=>D.tag),B=P3(F,"tag"),N=d3.filter((D)=>B[D]).map((D)=>{const q=B[D];return`## ${D.replace(/(\w)/,(H)=>H.toUpperCase())}\n\n${q.map(({tag:H,message:x})=>`- [\`${H.toUpperCase()}\`]: ${x}`).join("\n")}`}).join("\n\n");return console.warn("New release notes completed"),N}async function k1($={}){if(console.warn("Generating Release Notes..."),await A("git",["fetch","--tags"])===null)console.error("Couldn't fetch tags"),process.exit(1);const K=f$(R1.resolve("package.json")),{version:Z="0.0.1"}=K;console.warn("Current Project version:",{currentVersion:Z});const G=await l3("HEAD"),J=h3(G),Q=J&&f3(Z,J);if(!Q)console.error("Unable to determine next version",{currentVersion:Z}),process.exit(1);if($.tag){if(console.warn("Creating the new tag..."),await A("git",["tag","-a",Q,"-m",`Release ${Q}`])===null)console.error("Couldn't create tag"),process.exit(1)}if($.updatePackage){console.warn("Updating the package.json...");const W=f$(R1.resolve("package.json"));W.version=Q,g$(R1.resolve("package.json"),`${JSON.stringify(W,null,"  ")}\n`)}const X=`## ${Q}\n\n${G}`;if(!G.trim()&&$.errorOnEmpty)throw new Error("No notes were generated as no semver style messages were found");if($.file){console.warn("Writing the release notes to file:",$.file);const W=R1.resolve($.file),F=g3(W)?u3(W):"";g$(W,`${`${X}\n\n${F}`.trim()}\n`);for(let N=0;N<=100;++N){if(u$.existsSync(W))break;if(N===100)console.warn("Release notes file was not created in time for the final release commit:",z.redBrightBold(W)),process.exit(1)}if(console.warn("Adding fragments to git..."),await A("git",["add","-A"])===null)console.warn("Could not ensure all fragments are added for the next commit."),process.exit(1);if(console.warn("Committing to git..."),await A("git",["commit","-am",`Release ${Q}`])===null)console.error("Couldn't commit changes"),process.exit(1);console.warn(`\n\n${z.cyan(X)}\n\n`)}else console.warn(`\n\n${z.cyan(X)}\n\n`);process.env.VITE_RELEASE_VERSION=Q}var h3,g3,u3,f$,g$,d$,d3;var M0=L(()=>{O();c();h3=function($){const Y=$.toLowerCase().split("\n").map((K)=>(K.match(/## (\w+)/)||[])[1]).filter(Boolean);if(Y.includes("breaking"))return"major";if(Y.includes("added"))return"minor";return"patch"};({existsSync:g3,readFileSync:u3,readJSONSync:f$,writeFileSync:g$}=u$),d$={breaking:"breaking",feat:"added",feature:"added",added:"added",fix:"fixed",fixed:"fixed",hotfix:"fixed",task:"task"},d3=y3(Object.values(d$))});async function P1($){return M("git",["ls-remote",$])}var b0=L(()=>{T()});async function l$($){const Y=await A("git",["remote","-v"]);if(Y===null)console.warn("Could not list remotes for the git project."),process.exit(1);const K=Y.split(/\r?\n/g),Z=K.find((J)=>J.indexOf($)>=0);if(!Z)console.warn(b`
      You MUST have a remote named ${$} which points to the repository you
      wish to deploy to.

      ${K.join("\n")}
    `),process.exit(1);const G=Z.split(/\s+/g)[1];if(!P1(G))console.warn(`
      You do not seem to have access to the repo listed in the package json of
      this project. Please ensure you have write access to the repo:
      ${G}
      and then try to run the release again.
    `),process.exit(1)}var c$=L(()=>{n();c();b0()});async function p$(){const $=await A("git",["rev-parse","--abbrev-ref","HEAD"]);if($===null){console.error("Failed to determine current branch.");return}return $.trim()||void 0}var i$=L(()=>{c()});var n$;var s$=L(()=>{c();i$();n$=async($,Y)=>{const K=await p$();if(!K)return console.warn("Could not determine current branch."),!1;if(await A("git",["checkout",`${Y}`])===null)return console.warn(`Could not checkout branch ${Y}`),!1;if(await A("git",["reset","--hard",`${$}/${Y}`])===null){if(console.warn(`Could not reset branch ${Y}`),await A("git",["checkout",`${K}`]))console.warn(`Could not return to original branch ${K}`);return!1}if(await A("git",["checkout",`${K}`])===null)return console.warn(`Could not return to original branch ${K}`),!1;return!0}});import c3 from"fs-extra";import p3 from"path";async function o$(){return c3.readJSONSync(p3.resolve("package.json")).repository||{}}var a$=L(()=>{});var e$={};C(e$,{default:()=>{{return r$}}});import y1 from"fs-extra";import v1 from"path";async function i3(){const $=await o$(),Y=$.url;if(!$||!($.type!=="gitlab"||$.type!=="git"||$.type!=="bitbucket"||$.type!=="stash"))console.warn(`
      You MUST have a repository specified in your package json to use the
      release script. It must be of 'type: git' and have a valid ssh url to
      your git repo.

      Additionally, you MUST have a remote configured for your project of
      'origin' that matches the repo url listed in your package.json.

      Thus: "git remote -v" SHOULD output a line with
      origin <url in your package json repository field> (push)
    `),process.exit(1);const K=await A("git",["remote","-v"]);if(K===null)console.warn("Could not list remotes for the git project."),process.exit(1);const Z=K.split(/\r?\n/g);if(!Z.find((J)=>J.indexOf(i)>=0&&J.indexOf(Y)>=0))console.warn("Could not match package json repository to an origin remote in git CLI",{remoteListProcess:K,remotes:Z,ENSURE_REMOTE:i,ENSURE_REMOTE_PROJECT:Y}),process.exit(1);if(!P1(Y))console.warn(`
      You do not seem to have access to the repo listed in the package json of
      this project. Please ensure you have write access to the repo:
      ${Y}
      and then try to run the release again.
    `),process.exit(1);if(await e())console.error("You have uncommitted changes or the current state of the project can not be determined. Please commit or stash them before continuing."),process.exit(1);console.warn("Repository validation complete")}async function n3(){if(!await await M("git",["checkout","release"])){if(!await M("git",["checkout","-b","release"]))console.warn("Could not switch to the release branch. Make sure the branch exists locally."),process.exit(1)}if(!await M("git",["fetch",`${i}`]))console.warn("Could not fetch from remote servers."),process.exit(1);if(!await M("git",["reset","--hard",`${i}/dev`]))console.warn("Could not reset branch to dev"),process.exit(1);console.warn("Checked out release branch and updated to dev")}async function o3($){const Y=await U();if(!await M("git",["add","-A"]))console.warn("Could not ensure all fragments are added for the next commit."),process.exit(1);await k1({file:"RELEASE_NOTES.md",updatePackage:!0});const K=await U();if(Y===K)console.warn(`
      The release script did not detect any changes for a release. If you find
      this to be in error or you want to force a new release. Make some commits
      with proper release note formatted messages to trigger a release.
    `),process.exit(1);if($){if(s3()!=="patch")console.error(`
        Cannot create a release for an alternate branch that is not a simple
        patch. Features and breaking changes can ONLY be made on the main branch of
        development.
      `),process.exit(1)}const Z=await A("git",["log","-1","--pretty=%B"]);if(Z===null)console.warn("Could not read the last commit version information"),process.exit(1);const G=(Z.trim().toLowerCase().split("release ")[1]||"").trim();if(!G)console.warn("Could not determine release version from the last commit:\n\n",Z.toString(),"\n\n"),process.exit(1);if(y1.existsSync(v1.resolve("ui/release.json"))){try{const J=y1.readJSONSync(v1.resolve("ui/release.json"));J.version=G,y1.writeJSONSync(v1.resolve("ui/release.json"),J)}catch(J){console.warn("Could not update the release.json file with current library version."),process.exit(1)}if(!await M("git",["add","-A"]))console.warn("Could not ensure the release json was updated for the new version."),process.exit(1);if(!await M("git",["commit","--amend","--no-edit"]))console.warn("Could not amend the release commit to include the release json file."),process.exit(1)}if(G.includes('"'))console.warn("The update version generated is invalid as it contains invalid characters",{version:G}),process.exit(1);return console.warn("Updating version to",{version:G}),G}async function a3($){if(!await M("git",["tag","-a",$,"-m",`Release ${$}`]))console.warn("Could not make tag for git commit"),process.exit(1)}async function t$($,Y,K,Z,G){if(!await M("git",["push",G?"-f":void 0,$,`${K}:${Z}`]))console.warn(`Could not push release commit to ${$}`),process.exit(1);if(!await M("git",["push",$,Y]))console.warn("Could not push tag to the remote repository"),process.exit(1)}async function t3($,Y){if($&&$.length>0){if(!await P(b`
        The build and release was successful, would you like to release to the
        specified additional remotes?

        ${z.cyanBrightBold($.join("\n"))}
      `))return}if(!await M("git",["fetch",i]))console.warn("Could not fetch from remote servers."),process.exit(1);for(let K of $){const[Z,G,J,Q]=K.split(":");await l$(Z),await n$(i,G||"master"),await t$(Z,Y,G||"master",J||"master",Q==="force")}}async function r3($){process.env.NODE_ENV="production",await i3(),await n3(),await E1();const Y=await o3();if(await a3(Y),await t$(i,Y,"release","release",!0),await P("Would you like to run pr release?"))await l("pr",["release"]);await t3($,Y),await V1(!0)}async function r$($){console.warn("Executing release script"),r3($)}var s3,i;var $9=L(()=>{L0();M0();O();n();N1();T();c();b0();c$();U1();z0();s$();J1();a$();y();s3=function(){try{const Y=y1.readFileSync(v1.resolve("RELEASE_NOTES.md"),"utf8").toLowerCase().split("\n").map((K)=>(K.match(/## (\w+)/)||[])[1]).filter(Boolean);if(Y.includes("breaking"))return"major";if(Y.includes("added"))return"minor";return"patch"}catch($){console.error("Could not determine release type after release was created"),process.exit(1)}};i="origin"});var K9={};C(K9,{default:()=>{{return Y9}}});async function Y9(){await C1()}var Z9=L(()=>{H0()});var _0={};C(_0,{default:()=>{{return J9}}});import m from"fs-extra";import e3 from"ignore";import w from"path";async function $4($){const Y=m.readJSONSync(w.resolve("tsconfig.json"));if(Y.exclude=Y.exclude||[],Y.include=(Y?.include||[]).filter((Z)=>!m1.ignores(w.relative("./",Z))),m.writeJSONSync(w.resolve("tsconfig.temp.json"),Y),await E(500),$==="watch"){const Z=async()=>{console.warn("Exit TS process");try{m.removeSync(w.resolve("tsconfig.temp.json"))}catch(G){}process.exit(0)};process.on("exit",Z),process.on("SIGINT",Z),process.on("SIGUSR1",Z),process.on("SIGUSR2",Z),process.on("SIGTERM",Z),process.on("uncaughtException",Z)}if(!M("tsc",["-d",$==="watch"?"--watch":"","--incremental","--noemit","--pretty","--tsBuildInfoFile",w.resolve("node_modules/.cache/tsc/tsc.tsbuildinfo"),"--outDir",w.resolve("dist"),"--project",w.resolve("tsconfig.temp.json")]))console.warn("Failed to compile type declarations"),m.removeSync(w.resolve("tsconfig.temp.json")),process.exit(1);const K=(Y?.include||[]).filter((Z)=>!m1.ignores(w.relative("./",Z))).map((Z)=>w.resolve(Z)).filter((Z)=>m.existsSync(Z)&&!Z.includes("node_modules"));if(K.length>0){if(!M("eslint",[...K,"-c",w.resolve(".eslintrc"),"--ext",".ts","--ext",".tsx"]))console.warn("Failed eslint checks."),m.removeSync(w.resolve("tsconfig.temp.json")),process.exit(1)}m.removeSync(w.resolve("tsconfig.temp.json"))}async function J9($){await $4($)}var G9,m1;var q0=L(()=>{T();a();G9=w.resolve(".gitignore"),m1=e3.default();if(m.existsSync(G9))m1=m1.add(m.readFileSync(G9).toString())});var z9={};C(z9,{default:()=>{{return Q9}}});async function Q9(){console.warn(z.yellowBrightBold("Starting server...")),await X1()}var X9=L(()=>{o1();O()});var L9={};C(L9,{default:()=>{{return F9}}});import Y4 from"fs-extra";import N0 from"path";async function H9($){if(!Y4.existsSync($))return console.warn("Attempted to start a server but no server distribution was found at",$),!1;return await M("bun",[`${$}`]),!0}async function W9(){const $=N0.resolve("docs/index.js");return await H9($)}async function B9(){process.env.RESOURCE_PATH=N0.resolve("dist/app/client");const $=N0.resolve("dist/app/server/index.js");return await H9($)}async function F9($,Y){const{PORT:K="80"}=process.env;process.env.PORT=K;let Z=!1;switch($){case"app":Z=await B9();break;case"devops":Z=await W9();break;default:if($)console.warn("Invalid target for start script specified",$);break}if(!Z){if(Z=await B9(),Z)return;if(Z=await W9(),Z)return}}var M9=L(()=>{T()});import K4 from"fs-extra";import D0 from"path";async function b9(){const $=D0.resolve("tsconfig.json");if(!K4.existsSync($))throw new Error("Target project does not have a TSConfig");const Y=Boolean(process.env.DEBUG),K=process.env.PATTERN,Z=process.env.WATCH,G=process.env.LESS,J=D0.resolve("jest.config.js");M.silent=!0;try{if(Y)M("node",["--inspect-brk",D0.resolve("node_modules/.bin/jest"),"--runInBand",Z?"--watchAll":"","--verbose",G==="true"?"false":void 0,"--colors","--config",J,K?`--testNamePattern ${K}`:""]);else Y1(["jest",Z?"--watchAll":"","--verbose",G==="true"?"false":void 0,"--colors","--config",J,K?`--testNamePattern=${K}`:""])}catch(Q){console.warn("Tests failed. Please look at logs to see the errors discovered")}console.warn(z.cyanBright("Tests complete"))}var _9=L(()=>{O();B0();T()});var N9={};C(N9,{default:()=>{{return q9}}});async function q9(){console.warn("Running unit tests..."),await b9()}var D9=L(()=>{_9()});var U9={};C(U9,{default:()=>{{return x9}}});import A9 from"fs";import O9 from"path";import I9 from"rimraf";async function x9(){const $=O9.resolve("./node_modules/.cache/"),Y=O9.resolve("./build");if(A9.existsSync($))I9.sync($),console.warn("Cache: Clean complete");else console.warn("Cache: Already clean");if(A9.existsSync(Y))I9.sync(Y),console.warn("Build: Clean complete");else console.warn("Build: Already clean");if(await M("bun",["pm","cache","rm"]))console.warn("Bun: Clean complete");else console.warn("Bun: Already clean")}var V9=L(()=>{T()});import T9 from"path";import{createRequire as Z4} from"module";async function f1($,Y){const G=Z4(import.meta.url).resolve($).split("node_modules"),J=G[0],Q=G[1].split(T9.sep)[1];return T9.join(J,"node_modules",Q,"node_modules",".cache",Y)}var w9=L(()=>{});var S9={};C(S9,{default:()=>{{return C9}}});import G4 from"fs-extra";import Z1 from"path";import J4 from"url";async function Q4($,Y,K){const Z=await import("puppeteer"),G=await f1("puppeteer","pr-release"),J=await Z.launch({headless:!1,userDataDir:Z1.resolve(B1,G),defaultViewport:null}),Q=await J.newPage();console.warn("Opening project url..."),await Q.goto($);const X=await Q.evaluate(()=>document.body.getAttribute("data-project-id"));if(!X){console.warn("No project id found, User login required...");let F=!0;J.on("disconnected",()=>{if(!F)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)}),await Q.goto($),await Q.waitForFunction(()=>{const B=document?.body?.getAttribute("data-project-id");return B!==null&&B!==void 0},{timeout:0}),await Q.close(),F=!1}else await Q.close();console.warn("Project ID found:",X,"\nOpening merge request...");const W=async(F,B,N)=>{const D=await J.newPage();await D.goto(`${$}/-/merge_requests/new?${N?"utf8=%E2%9C%93&":""}merge_request%5Bsource_project_id%5D=${X}&merge_request%5Bsource_branch%5D=${encodeURIComponent(F)}&merge_request%5Btarget_project_id%5D=${X}&merge_request%5Btarget_branch%5D=${B}`),await D.waitForFunction(()=>{const q=document.querySelector("#merge_request_title");return q!==null&&q!==void 0},{timeout:0}),await D.evaluate((q)=>{let H=document.querySelector("#merge_request_title");if(H)H.value=`Release ${q}`;if(H=document.querySelector("#merge_request_description"),H)H.value=`Release ${q}`;if(H=document.querySelector("#merge_request_force_remove_source_branch"),H)H.checked=!1,H.value="0"},Y),await new Promise((q)=>{D.on("close",()=>{q(void 0),console.warn("Gitlab ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([W("release","dev"),W("release",K)]),J.close()}async function A0($,Y,K,Z){const G=await import("puppeteer"),J=await f1("puppeteer","pr-release");let Q=await G.launch({headless:!Z,userDataDir:Z1.resolve(B1,J),defaultViewport:null});const X=await Q.newPage();if(Z){console.warn("User login required...");let N=!0;Q.on("disconnected",()=>{if(!N)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)});const D="https://github.com/login";console.warn("Opening github login page: ",D),await X.goto(D),await X.waitForFunction(()=>{const q=document?.body?.getAttribute("class")?.split(" ").find((H)=>H.startsWith("logged-in"));return q!==null&&q!==void 0},{timeout:0}),N=!1}else console.warn("Opening project url: ",$),await X.goto($);console.warn("Checking for logged-in attribute on body...");const W=await X.evaluate(()=>{return console.warn("logged-in check:",document?.body?.getAttribute("class")?.split(" ").find((N)=>N.startsWith("logged-in"))),document?.body?.getAttribute("class")?.split(" ").find((N)=>N.startsWith("logged-in"))});if(console.warn("Loggin in check:",W),!W&&Z)await Q.close(),console.error("Failed to log in the user for github."),process.exit(1);else if(!W){console.warn("Logged-in not found on body, login might be needed..."),await Q.close(),A0($,Y,K,!0);return}else Q.close();const F={headless:!1,userDataDir:Z1.resolve(B1,J),defaultViewport:null};Q=await G.launch(F);const B=async(N,D)=>{const q=await Q.newPage();await q.goto(`${$}/compare/${D}...${N}`),await q.waitForFunction(()=>{const H=document.querySelector("#repo-content-pjax-container > div > div.js-details-container.Details.js-compare-pr > div > button");return H?.click(),H!==null&&H!==void 0}),await q.evaluate(async(H)=>{let x=document.querySelector("#pull_request_title");if(x)x.value=`Release ${H}`;if(x=document.querySelector('[name="pull_request[body]"]'),x)x.value=`Release ${H}`},Y),await new Promise((H)=>{q.on("close",()=>{H(void 0),console.warn("Github ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([B("release","dev"),B("release",K)]),Q.close()}async function z4($,Y,K,Z){const G=await import("puppeteer"),J=await f1("puppeteer","pr-release");let Q=await G.launch({headless:!Z,userDataDir:Z1.resolve(B1,J),defaultViewport:null});const X=await Q.newPage();if(Z){console.warn("User login required...");let N=!0;Q.on("disconnected",()=>{if(!N)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)});const D=$;console.warn("Opening azure repo login page: ",D),await X.goto(D),await X.waitForFunction(()=>{const q=window.sessionStorage.msameid;return q!==null&&q!==void 0},{timeout:0}),N=!1}else console.warn("Opening project url: ",$),await X.goto($);console.warn("Checking for logged-in attribute on body...");const W=await X.evaluate(()=>{return console.warn("logged-in check:",window.sessionStorage.msameid),window.sessionStorage.msameid});if(console.warn("Loggin in check:",W),!W&&Z)await Q.close(),console.error("Failed to log in the user for azure."),process.exit(1);else if(!W){console.warn("MS id not found, login might be needed..."),await Q.close(),A0($,Y,K,!0);return}else Q.close();const F={headless:!1,userDataDir:Z1.resolve(B1,J),defaultViewport:null};Q=await G.launch(F);const B=async(N,D)=>{const q=await Q.newPage();await q.goto(`${$}&sourceRef=${N}&targetRef=${D}`),await q.waitForFunction(()=>{const H=document.querySelector("button.primary");return H!==null&&H!==void 0}),await q.evaluate(async(H)=>{let x=document.querySelector('[aria-label="Enter a title"]');if(x)x.value=`Release ${H}`;if(x=document.querySelector('[aria-label="Description"]'),x)x.value=`Release ${H}`},Y),await new Promise((H)=>{q.on("close",()=>{H(void 0),console.warn("Azure project ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([B("release","dev"),B("release",K)]),Q.close()}async function C9($,Y,K="master",...Z){if(!(new Set(["gitlab","git","github","azure"])).has(Y))console.error(`Unsupported repo type: ${Y}`),process.exit(1);if(await e())console.error("You have uncommitted changes or the current state of the project can not be determined. Please commit or stash them before continuing."),process.exit(1);const Q=G4.readJsonSync(Z1.resolve("package.json")).version;switch(Y){case"gitlab":await Q4($,Q,K);break;case"git":case"github":await A0($,Q,K);break;case"azure":await z4($,Q,K);break;default:console.warn("No supported repo type found")}}var B1;var j9=L(()=>{w9();U1();B1=J4.fileURLToPath(new URL(".",import.meta.url))});O();import*as X4 from"commander";import W4 from"inquirer-autocomplete-prompt";import B4 from"inquirer";import E9 from"path";import H4 from"yargs";O();n();import S0 from"fs-extra";import j0 from"path";O();import U0 from"fs";import V0 from"path";function x0($){const Y=$.split(/\r?\n/),K={};let Z=null,G=null;return Y.forEach((J)=>{if(J=J.trim(),J===""||J.startsWith("#"))return;if(J.endsWith("{")){Z=J.split(/\s+/)[0],K[Z]={};return}if(J==="}"){Z=null,G=null;return}const Q=J.match(/^([\w.]+)\s*=\s*(.*)$/);if(Q){const W=Q[1];let F=Q[2];if(!isNaN(parseFloat(F)))F=parseFloat(F);else if(F==="true")F=!0;else if(F==="false")F=!1;if(G)K[Z??"null"][G][W]=F;else if(Z)K[Z][W]=F;else K[W]=F;return}const X=J.match(/^([\w.]+)\.([\w.]+)\s*=\s*(.*)$/);if(X){const W=X[1],F=X[2],B=X[3];if(!K[W])K[W]={};if(!K[W][F])K[W][F]={};K[W][F][B]=null,Z=W,G=F;return}console.error(`Unrecognized line: ${J}`)}),K}function T0($){try{if(!U0.existsSync(V0.resolve(".env")))return;const Y=U0.readFileSync(V0.resolve($||".env"),"utf8"),K=x0(Y);Object.entries(K).forEach(([Z,G])=>{if(typeof G==="string")process.env[Z]=G;else if(typeof G==="number")process.env[Z]=G.toString();else if(typeof G==="boolean")process.env[Z]=G.toString()})}catch(Y){if(Y instanceof Error)console.error(z.red("Error reading .env file:\n",z.yellow(Y.stack||Y.message)))}}G1();J1();import h9 from"fs-extra";import l9 from"inquirer";import{stripIndent as c9} from"common-tags";async function C0($,Y,K,Z,G,J){let Q=J||!1;if(h9.existsSync($)){const{result:X}=await l9.prompt([{type:"confirm",name:"result",message:c9`${Y}`,default:J}]);if(X)K($),G?.($);Q=X}else K($),Z?.($);return Q}async function p9(){const $=(await import(j0.resolve("env.config.ts"))).default;if(!$)throw new Error("No env.config.ts file found.");if(!Array.isArray($))console.error("env.config.ts is not formatted correctly. Please follow the correct type convention.");return $}async function d1($){T0();try{const Y=await p9(),K=[],Z=[];if(Y.forEach((G)=>{if(!G)return;if(G.required){if(!process.env[G.name])K.push(b`
              Missing: ${G.name}\nDesription: ${G.description}
            `)}else if(!process.env[G.name]&&G.warn!==!1)Z.push(b`
              Missing: ${G.name}\nDesription: ${G.description}
            `)}),Z.length>0)console.warn(z.yellowBrightBold("The following environment variables are recommended but missing from your environment:\n")),console.warn(z.yellowBright(b`
          ${Z.join("\n")}
        `));if(K.length>0)console.error(z.redBrightBold("The following environment variables are required but missing from your environment:\n")),console.error(z.redBright(b`
          ${K.join("\n")}
        `));if(K.length>0){if($){if(await P(b`
          There seems to be some missing environment variables. Would you like
          to generate a .env file with the default values specified in the
          env.config file?
        `)){const J=[];for(let F of Y)J.push([F.name,w0(F.default)?F.default:f(F.default)?await F.default():void 0]);const Q=J.filter((F)=>F[1]).map((F)=>`${F[0]}=${F[1]}`).join("\n");if(!Q)console.warn(b`
              There are no defaults available for this env.config. So we can not
              generate an env file you. Please review the env.config.ts file and
              properly set the default values for the required environment
              variables.
            `);const X=j0.resolve(".env");if(!await C0(X,b`
              There appears to already be a .env file.
              Would you like to add the missing defaults to it?
            `,()=>{},()=>S0.writeFile(X,Q),()=>{S0.appendFileSync(X,`\n${Q}`)},!1))console.error("Did not write the .env file. Please correct the env and try again."),process.exit(1);return console.warn("Attempting to build the env again and continue with the command..."),d1(!1)}}process.exit(1)}}catch(Y){console.warn(b`
      No ${z.cyanBrightBold("env.config.ts")} file found. Environment will not be validated.
    `)}}n();import n9 from"fs-extra";import s9 from"inquirer";import o9 from"path";T();s();G1();async function o($,Y,K){const Z=await R(),G=$.filter(f);return await M(Z[0],["i",K?"--no-save":null,Y?`-${Y}`:null,...G])}T();import i9 from"fuzzy";var E0=($)=>async(Y,K)=>{let Z=[];if($ instanceof Set)Z=Array.from($);else Z=$;return i9.filter(K||"",Z).map((G)=>G.string)};s();async function R0($){try{return await import($),!0}catch(Y){return console.error("Requested package is not available in this current project:",$),!1}}a();async function k0($,Y){const K=$||["puppeteer"];for(let Z of K)if(console.warn("Checking on dependency availability:",Z),!await R0(Z)){let J=Y;if(!J)J=(await s9.prompt([{type:"autocomplete",name:"resolution",message:`How do you want to resolve the missing package "${Z}":`,source:E0([g.InstallOnce,g.InstallAbove,g.DoNothing])}])).resolution;switch(J){case g.Install:await o([Z],"E");break;case g.InstallOnce:o([Z],"E",!0);break;case g.InstallAbove:{const Q=process.cwd();process.chdir("..");const X=await R();if(!n9.existsSync(o9.resolve("package.json")))M(X[0],["init","-y"]);await o([Z],"E"),process.chdir(Q),await E(100);break}default:process.exit(1)}}}var g;(function(G){G["Install"]="Install to current project";G["InstallOnce"]="Install once to current project";G["InstallAbove"]="Install in parent directory (Makes package available to all peer projects)";G["DoNothing"]="Do Nothing (this will end this current process as the package is required)"})(g||(g={}));var O0=function(){return g1.debug=V.debug,g1.verbose=V.verbose,g1.pattern=V.pattern,g1};async function D4(){await d1(!0),V.parse(process.argv)}B4.registerPrompt("autocomplete",W4);var{Command:F4}=X4,V=new F4,g1={};V.version("0.0.1");V.option("-v, --verbose","Outputs more detailed information during crashes.");V.option("--debug [param]",b`
    Provides debugging contextual information various commands might use to
    aid in developing Devops.
  `);V.option("-p, --pattern [param]",b`
    Provides a pattern for certain operations to utilize. This is primarily
    used by unit tests to filter tests to specified tests.
  `);var R9=V.command("dev").description(b`
    These are the commands associated with starting up developer environments
    for various project types or portions of a project.
  `);R9.command("vite").description(b`
      Starts up a developer environment that performs incremental builds while
      developing within the lib and app folders. Uses vite and vite
      config.
    `).action(async()=>{(await Promise.resolve().then(() => (d0(),u0))).default().catch(($)=>{console.warn("dev-vite process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});R9.command("storybook").option("-i, --include <include...>","Additional storybook modules to load into storybook. These are the names of properly formatted dependencies installed into node_modules.").description(b`
      Starts a storybook instance for developing the UI components of the
      project. This makes the "ui/stories" folder in the project the expected
      development point.
    `).action(async({include:$})=>{(await Promise.resolve().then(() => (e1(),r1))).default("",$,E9.resolve(process.cwd()),O0()).catch((Y)=>{console.warn("storybook process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var L4=V.command("storybook");L4.command("run").option("-i, --include <include...>","Additional storybook modules to load into storybook. These are the names of properly formatted dependencies installed into node_modules.").description(b`
      Starts a storybook instance for developing the UI components of the
      project. This makes the "ui/stories" folder in the project the expected
      development point.
    `).action(async({include:$})=>{(await Promise.resolve().then(() => (e1(),r1))).default("",$,E9.resolve(process.cwd()),O0()).catch((Y)=>{console.warn("storybook process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});V.command("url [uri...]").description(b`
      Simple command to open a specified URL in the browser.
    `).action(async($)=>{(await Promise.resolve().then(() => (b$(),M$))).default($).catch((Y)=>{console.warn("url process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var H1=V.command("release").description(b`
    These commands are used for facilitating distribution releases of
    applications. This includes tools for building th dist folder fragments,
    viewing the expected release notes, and actually performing a complete
    release cycle.
  `);H1.command("deploy [add-remote...]").description(b`
      Performs actions necessary to update the distribution of the project.
      This will automatically update release notes, tag the release, and
      commit and push to a 'release' branch which will be ready for merging
      into master and dev.

      Specify additional remotes to deploy to via the add-remote option.
      This will deploy the release to additional remotes (AFTER all other normal
      deploy operations complete). This value is the NAME of the remote as it
      appears when you perform a "git remote -v" command.

      You can specify a specific target branch via a colon: remote:branch
      Otherwise, this will use the same main branch as configured for this
      project.
    `).action(async($)=>{o([]),(await Promise.resolve().then(() => ($9(),e$))).default($).catch((Y)=>{console.warn("release-deploy process exited unexpectedly\n",Y.stack||Y.message),process.exit(1)})});H1.command("types").description(b`
      Updates JUST the types in the dist folder. These are the same types
      generated when building a release.
    `).action(async()=>{(await Promise.resolve().then(() => (Z9(),K9))).default().catch(($)=>{console.warn("release-types process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});H1.command("view").description(b`
      This runs the release-view script. For this case, it will only display
      the release notes in the console. Actual generated release notes are a
      part of the release process.
    `).action(async()=>{(await Promise.resolve().then(() => (q0(),_0))).default("").then(async()=>{console.warn(z.cyanBrightBold("TS check passed, generating notes...")),(await Promise.resolve().then(() => (M0(),h$))).default().catch(($)=>{console.warn("release-notes process exited unexpectedly",$.stack||$.message),process.exit(1)})}).catch(($)=>{console.warn(z.redBrightBold(b`
              Failed TS check. Release notes will not be produced until all TS
              errors are resolved.
            `)),console.warn($.stack||$.message),process.exit(1)})});H1.command("build").description(b`
      This runs the release-build script. This generates all of the release
      fragments. This should ONLY be used for testing and experimenting. Actual
      release fragments should be properly created and deployed using the
      release deploy command.
    `).action(async()=>{(await Promise.resolve().then(() => (L0(),m$))).default().catch(($)=>{console.warn("release-deploy process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});var M4=H1.command("start").description(b`
      This starts up released related processes. This includes things like
      starting up the dev server without any additional builds or auto
      configuration for development.
    `);M4.command("server").description(b`
      Starts up the app server without any additional builds etc. Use the
      environments:

        BUILD_MODE: Targets an env to run the server for.
        RESOURCE_PATH: The path to the static files to serve.
    `).action(async()=>{(await Promise.resolve().then(() => (X9(),z9))).default().catch(($)=>{console.warn("release-start-server process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});V.command("start [target]").description(b`
      This fires up a server to make any static content available for being
      served.
      There are a few options for what content will be served by this script:

      - The web app
      - Devops API

      The start script will automatically pick the web app over the devops
      files, but you can specify a target if you have a devops API and a web
      app:

      - app
      - devops
    `).action(async($)=>{(await Promise.resolve().then(() => (M9(),L9))).default($,O0()).catch((Y)=>{console.warn("start process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var b4=V.command("test").description(b`
    These commands are used for running tests. This includes tools for
    running unit tests a single time or in a watch mode.

    Use the environment variables for modifying behavior:

    ${z.yellowBrightBold("PATTERN")} - This causes the tests to only run on
    files that match the pattern

    ${z.yellowBrightBold("LESS")} - This removes the verbose output list of
    all tests ran
  `);b4.command("run").description(b`
      Runs all unit tests in the unit-test folder once.
    `).action(async()=>{(await Promise.resolve().then(() => (D9(),N9))).default().catch(($)=>{console.warn("test-run process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var _4=V.command("clean").description(b`
    Common cleaning tools for various fragments within the project.
  `);_4.command("cache").description(b`
      Cleans out build and cache files to help ensure a complete rebuild takes
      place.
    `).action(async()=>{(await Promise.resolve().then(() => (V9(),U9))).default().catch(($)=>{console.warn("clean-cache process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var q4=V.command("ts").description(b`
    These commands are used for running typescript. This includes tools for
    running typescript compilation a single time or in a watch mode.
  `);q4.command("run").description(b`
      Runs typescript compilation to check for errors. Does NOT emit files, thus
      is a good mechanism for checking a build before running a release.
    `).action(async()=>{(await Promise.resolve().then(() => (q0(),_0))).default("").catch(($)=>{console.warn("ts process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var N4=V.command("pr").option("--repoUrl <value>",b`
      The https URL to the repo to make the PR into
    `).option("--repoType <value>",b`
    The repository type to make the PR into. Supported types are: git, gitlab
  `).option("--masterBranch <value>",b`
    This indicates which branch is the master/main of the repository.
  `);N4.command("release").description(b`
      This creates two PRs that merges the current remote release branch into
      the remote dev and master branches.
    `).action(async()=>{const{repoUrl:$,repoType:Y,masterBranch:K}=H4(process.argv).argv;if(!$||!Y||!K)console.warn("You must specify both --repoUrl and --repoType to use this command"),process.exit(1);await k0().catch(()=>process.exit(1)),console.warn("Dependency checks passed, continuing..."),(await Promise.resolve().then(() => (j9(),S9))).default($,Y,K).catch((Z)=>{console.warn("pr-release process exited unexpectedly"),console.warn(Z.stack||Z.message),process.exit(1)})});D4();

//# debugId=798050F0C5DD08ED64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
