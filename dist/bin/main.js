#!/usr/bin/env bun
// @bun
import{createRequire as c9}from"node:module";var g9=Object.create;var{getPrototypeOf:u9,defineProperty:f1,getOwnPropertyNames:d9}=Object;var h9=Object.prototype.hasOwnProperty;var l9=($,Y,K)=>{K=$!=null?g9(u9($)):{};const Z=Y||!$||!$.__esModule?f1(K,"default",{value:$,enumerable:!0}):K;for(let G of d9($))if(!h9.call(Z,G))f1(Z,G,{get:()=>$[G],enumerable:!0});return Z};var M1=($,Y)=>()=>(Y||$((Y={exports:{}}).exports,Y),Y.exports);var E=($,Y)=>{for(var K in Y)f1($,K,{get:Y[K],enumerable:!0,configurable:!0,set:(Z)=>Y[K]=()=>Z})};var M=($,Y)=>()=>($&&(Y=$($=0)),Y);var y=c9(import.meta.url);var X;var O=M(()=>{X={cyan:(...$)=>`\x1B[36m${$.join(" ")}\x1B[0m`,red:(...$)=>`\x1B[31m${$.join(" ")}\x1B[0m`,yellow:(...$)=>`\x1B[33m${$.join(" ")}\x1B[0m`,green:(...$)=>`\x1B[32m${$.join(" ")}\x1B[0m`,blue:(...$)=>`\x1B[34m${$.join(" ")}\x1B[0m`,magenta:(...$)=>`\x1B[35m${$.join(" ")}\x1B[0m`,cyanBright:(...$)=>`\x1B[96m${$.join(" ")}\x1B[0m`,redBright:(...$)=>`\x1B[91m${$.join(" ")}\x1B[0m`,yellowBright:(...$)=>`\x1B[93m${$.join(" ")}\x1B[0m`,greenBright:(...$)=>`\x1B[92m${$.join(" ")}\x1B[0m`,blueBright:(...$)=>`\x1B[94m${$.join(" ")}\x1B[0m`,magentaBright:(...$)=>`\x1B[95m${$.join(" ")}\x1B[0m`,whiteBright:(...$)=>`\x1B[97m${$.join(" ")}\x1B[0m`,gray:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,grey:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,white:(...$)=>`\x1B[37m${$.join(" ")}\x1B[0m`,black:(...$)=>`\x1B[30m${$.join(" ")}\x1B[0m`,blackBright:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,bgCyan:(...$)=>`\x1B[46m${$.join(" ")}\x1B[0m`,bgRed:(...$)=>`\x1B[41m${$.join(" ")}\x1B[0m`,bgYellow:(...$)=>`\x1B[43m${$.join(" ")}\x1B[0m`,bgGreen:(...$)=>`\x1B[42m${$.join(" ")}\x1B[0m`,bgBlue:(...$)=>`\x1B[44m${$.join(" ")}\x1B[0m`,bgMagenta:(...$)=>`\x1B[45m${$.join(" ")}\x1B[0m`,bgCyanBright:(...$)=>`\x1B[106m${$.join(" ")}\x1B[0m`,bgRedBright:(...$)=>`\x1B[101m${$.join(" ")}\x1B[0m`,bgYellowBright:(...$)=>`\x1B[103m${$.join(" ")}\x1B[0m`,bgGreenBright:(...$)=>`\x1B[102m${$.join(" ")}\x1B[0m`,bgBlueBright:(...$)=>`\x1B[104m${$.join(" ")}\x1B[0m`,bgMagentaBright:(...$)=>`\x1B[105m${$.join(" ")}\x1B[0m`,cyanBrightBold:(...$)=>`\x1B[96m\x1B[1m${$.join(" ")}\x1B[0m`,redBrightBold:(...$)=>`\x1B[91m\x1B[1m${$.join(" ")}\x1B[0m`,yellowBrightBold:(...$)=>`\x1B[93m\x1B[1m${$.join(" ")}\x1B[0m`,greenBrightBold:(...$)=>`\x1B[92m\x1B[1m${$.join(" ")}\x1B[0m`,blueBrightBold:(...$)=>`\x1B[94m\x1B[1m${$.join(" ")}\x1B[0m`,magentaBrightBold:(...$)=>`\x1B[95m\x1B[1m${$.join(" ")}\x1B[0m`,whiteBrightBold:(...$)=>`\x1B[97m\x1B[1m${$.join(" ")}\x1B[0m`,grayBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`,greyBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`,whiteBold:(...$)=>`\x1B[37m\x1B[1m${$.join(" ")}\x1B[0m`,blackBold:(...$)=>`\x1B[30m\x1B[1m${$.join(" ")}\x1B[0m`,blackBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`}});import{stripIndent as p9}from"common-tags";function _($,...Y){return`${p9($,...Y)}\n\n`}var s=()=>{};function C0($){return $&&$.charCodeAt!==void 0}function R($){return $!==void 0&&$!==null}import i9 from"inquirer";import{stripIndent as n9}from"common-tags";async function v($,Y,K){const{result:Z}=await i9.prompt([{type:"confirm",name:"result",message:n9`${$}`,default:Y}]);if(Z)K?.();return Z}var J1=()=>{};function u1($){return $!==void 0&&$!==null}function F1($){return u1($)&&u1($.status)&&u1($.stderr)}async function _1($,Y=[]){try{const K=Bun.spawnSync([$,...Y.filter(R)],{stdio:["inherit","inherit","inherit"],env:process.env});if(K.exitCode!==0){if(!_1.silent)console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.exitCode}`),console.error(new Error().stack);return!1}}catch(K){if(!_1.silent){if(F1(K))console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.status}`);else if(K instanceof Error)console.error(K.message);console.error(new Error().stack)}return!1}return!0}var F;var C=M(()=>{_1.silent=!1;F=_1});async function k(){if(h)return h;if(process.env.USE_NPM==="true")h=["npm","npx"];else if(process.env.USE_BUN==="true")h=["bun","bunx"];else if(await F("bun",["--version"]))h=["bun","bunx"];else h=["npm","npx"];return h}var h=null;var o=M(()=>{C()});async function S($){await new Promise((Y)=>setTimeout(Y,$))}import Y3 from"fs-extra";import l from"path";async function t(){console.warn("Building Vite config using base:",X.yellowBrightBold(l.resolve("vite.config.ts")));let $=await(await import(l.resolve("vite.config.ts"))).default();const Y=await Y3.readJSONSync(l.resolve("tsconfig.json"));return $={...$,logLevel:"info",mode:"development",root:l.resolve("app/client"),clearScreen:!0,build:{...$.build,cssCodeSplit:!0,outDir:l.resolve("build/client"),sourcemap:!0,rollupOptions:{output:{manualChunks:void 0}},watch:{...$.build?.watch,include:[...(Array.isArray($.build?.watch?.include)?$.build?.watch?.include:[$.build?.watch?.include])||[],...Y?.include?.map((K)=>l.resolve(K))||[],"tsconfig.json"].filter(Boolean)},emptyOutDir:!0},resolve:{alias:{config:l.resolve("app/config")}}},$}var b1=M(()=>{O()});import K3 from"deepmerge";import Z3 from"fs-extra";import G3 from"path";async function u(){const $=Z3.readJSONSync(G3.resolve("package.json"));return K3($.dependencies||{},$.peerDependencies||{})}var q1=()=>{};import v0 from"fs-extra";import m0 from"path";async function T(){return v0.readJSONSync(m0.resolve("package.json")).version||""}var m=()=>{};import*as f0 from"vite";import J3 from"fs-extra";import d1 from"path";async function Q1(){if(process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await T(),console.warn(X.yellowBrightBold("Starting Vite client build...")),!J3.existsSync(d1.resolve("app/client/index.ts"))){console.warn("Tried to start development process for the app client, but no entry file was found.");return}const $=await t();$.root=d1.resolve("app/client"),$.build.outDir=d1.resolve("build/client"),$.build.rollupOptions.external=Object.keys(await u()),await f0.build($),console.warn(X.yellowBrightBold("Vite client build process started..."))}var h1=M(()=>{b1();O();q1();m()});function g0($){const Y=(K)=>(Z)=>{if($(K,Z),Z)process.exit(1);else process.exit(0)};process.on("exit",Y("exit")),process.on("SIGINT",Y("SIGINT")),process.on("SIGUSR1",Y("SIGUSR1")),process.on("SIGUSR2",Y("SIGUSR2")),process.on("SIGTERM",Y("SIGTERM")),process.on("uncaughtException",Y("uncaughtException"))}function Q3(){if(u0!==null)return;u0=setInterval(()=>{while(l1.length>0){const $=l1.shift();if($)console.log(...$)}},400)}function c1(...$){l1.push($),Q3()}var l1,u0=null;var d0=M(()=>{l1=[]});import X3 from"child_process";import p1 from"path";import z3 from"readline";async function X1($){console.warn("\nRunning the App server at: ",X.yellowBrightBold(p1.resolve("app/server")),"\n"),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await T(),process.env.RESOURCE_PATH=process.env.RESOURCE_PATH||p1.resolve("build/client");const Y=await k();if(Y[0]!=="bun")console.error("Currently only an environment with bun installed is supported for this command.");const K=X3.spawn(Y[0],["--watch",p1.resolve("app/server/index.ts")]);process.stdin.setRawMode?.(!0),process.stdin.resume(),process.stdin.setEncoding("utf8"),z3.emitKeypressEvents(process.stdin);let Z=!1;if(process.stdin.on("keypress",async(G,J)=>{if(J&&J.ctrl&&J.name==="c")K.kill(),process.exit(0);else if(J&&J.ctrl&&J.name==="d")K.kill(),process.exit(0);else if(G.toString()==="b"||G.toString()==="B"){if(Z)return;Z=!0,await Q1(),Z=!1}else if(G.toString()==="q"||G.toString()==="Q")if(K.kill(),J.shift)process.exit(123);else process.exit(0)}),process.stdin.pipe(K.stdin),$)$(K);else K.stdout.on("data",function(G){c1(`${G.toString().slice(0,-1)}`)}),K.stderr.on("data",function(G){c1(`${G.toString().slice(0,-1)}`)});g0(async(G,J)=>{if(K.kill(),console.warn("EXIT BUILD SERVER"),console.warn(X.redBrightBold(G)),J&&J instanceof Error)console.warn(X.redBrightBold(J.stack||J.message));process.exit(0)})}var i1=M(()=>{h1();O();o();d0();m()});var l0={};E(l0,{default:()=>h0});async function h0(){process.env.NODE_ENV="development",Q1(),console.warn(X.yellowBrightBold("Starting dev server...")),process.env.VITE_RELEASE_VERSION=await T(),await X1()}var c0=M(()=>{h1();i1();O();m()});import r from"path";import W3 from"url";async function p0(){if(r.basename(r.resolve(n1,".."))==="dist")return r.resolve(n1,"../../");return r.resolve(n1,"../../../")}var n1;var i0=M(()=>{n1=W3.fileURLToPath(new URL(".",import.meta.url))});async function c($,Y=[]){const K=await k();return F(K[0],["run",$,Y.length>0&&Y[0]!=="--"?"--":void 0,...Y])}var D1=M(()=>{C();o()});var o1={};E(o1,{default:()=>n0});import s1 from"path";async function n0($,Y,...K){const Z=s1.resolve(".");process.env.PROJECT_ROOT=Z,process.env.VITE_RELEASE_VERSION=await T();const G=s1.resolve(".storybook"),J=await p0();if(process.chdir(J),Y&&Y.length>0)process.env.NODE_MODULES_STORIES=Y.join(",");if($==="build"){if(!c("storybook",["build","-c",G,"-o",`"${s1.resolve(Z,"storybook-static")}"`]))console.error(X.redBrightBold("Failed to build storybook"))}else if(!c("storybook",["dev","--no-version-updates","-p",process.env.PORT||"6006","-c",`"${G}"`]))console.error(X.redBrightBold("Failed to run storybook"))}var a1=M(()=>{O();i0();D1();m()});var r1=M1((z5,o0)=>{function B3(){try{return s0.statSync("/.dockerenv"),!0}catch($){return!1}}function H3(){try{return s0.readFileSync("/proc/self/cgroup","utf8").includes("docker")}catch($){return!1}}var s0=import.meta.require("fs"),t1;o0.exports=()=>{if(t1===void 0)t1=B3()||H3();return t1}});var r0=M1((W5,e1)=>{var L3=import.meta.require("os"),M3=import.meta.require("fs"),a0=r1(),t0=()=>{if(process.platform!=="linux")return!1;if(L3.release().toLowerCase().includes("microsoft")){if(a0())return!1;return!0}try{return M3.readFileSync("/proc/version","utf8").toLowerCase().includes("microsoft")?!a0():!1}catch($){return!1}};if(process.env.__IS_WSL_TEST__)e1.exports=t0;else e1.exports=t0()});var $$=M1((B5,e0)=>{e0.exports=($,Y,K)=>{const Z=(G)=>Object.defineProperty($,Y,{value:G,enumerable:!0,writable:!0});return Object.defineProperty($,Y,{configurable:!0,enumerable:!0,get(){const G=K();return Z(G),G},set(G){Z(G)}}),$}});var X$=M1((H5,Q$)=>{function D3(){if($0===void 0)$0=q3()||b3();return $0}function G$($){if(typeof $==="string"||Array.isArray($))return $;const{[K$]:Y}=$;if(!Y)throw new Error(`${K$} is not supported`);return Y}function Z0({[e]:$},{wsl:Y}){if(Y&&N1)return G$(Y);if(!$)throw new Error(`${e} is not supported`);return G$($)}var __dirname="/Users/diniden/Desktop/VoidRay/dev-ops/node-devops/node_modules/open",F3=import.meta.require("path"),_3=import.meta.require("child_process"),{promises:A1,constants:J$}=import.meta.require("fs"),N1=r0(),b3=r1(),Y0=$$(),Y$=F3.join(__dirname,"xdg-open"),{platform:e,arch:K$}=process,q3=()=>{try{return A1.statSync("/run/.containerenv"),!0}catch{return!1}},$0,N3=(()=>{let Y;return async function(){if(Y)return Y;const K="/etc/wsl.conf";let Z=!1;try{await A1.access(K,J$.F_OK),Z=!0}catch{}if(!Z)return"/mnt/";const G=await A1.readFile(K,{encoding:"utf8"}),J=/(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(G);if(!J)return"/mnt/";return Y=J.groups.mountPoint.trim(),Y=Y.endsWith("/")?Y:`${Y}/`,Y}})(),Z$=async($,Y)=>{let K;for(let Z of $)try{return await Y(Z)}catch(G){K=G}throw K},O1=async($)=>{if($={wait:!1,background:!1,newInstance:!1,allowNonzeroExitCode:!1,...$},Array.isArray($.app))return Z$($.app,(z)=>O1({...$,app:z}));let{name:Y,arguments:K=[]}=$.app||{};if(K=[...K],Array.isArray(Y))return Z$(Y,(z)=>O1({...$,app:{name:z,arguments:K}}));let Z;const G=[],J={};if(e==="darwin"){if(Z="open",$.wait)G.push("--wait-apps");if($.background)G.push("--background");if($.newInstance)G.push("--new");if(Y)G.push("-a",Y)}else if(e==="win32"||N1&&!D3()&&!Y){const z=await N3();if(Z=N1?`${z}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`:`${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`,G.push("-NoProfile","-NonInteractive","\u2013ExecutionPolicy","Bypass","-EncodedCommand"),!N1)J.windowsVerbatimArguments=!0;const W=["Start"];if($.wait)W.push("-Wait");if(Y){if(W.push(`"\`"${Y}\`""`,"-ArgumentList"),$.target)K.unshift($.target)}else if($.target)W.push(`"${$.target}"`);if(K.length>0)K=K.map((L)=>`"\`"${L}\`""`),W.push(K.join(","));$.target=Buffer.from(W.join(" "),"utf16le").toString("base64")}else{if(Y)Z=Y;else{const z=!__dirname||__dirname==="/";let W=!1;try{await A1.access(Y$,J$.X_OK),W=!0}catch{}Z=process.versions.electron||e==="android"||z||!W?"xdg-open":Y$}if(K.length>0)G.push(...K);if(!$.wait)J.stdio="ignore",J.detached=!0}if($.target)G.push($.target);if(e==="darwin"&&K.length>0)G.push("--args",...K);const Q=_3.spawn(Z,G,J);if($.wait)return new Promise((z,W)=>{Q.once("error",W),Q.once("close",(L)=>{if(!$.allowNonzeroExitCode&&L>0){W(new Error(`Exited with code ${L}`));return}z(Q)})});return Q.unref(),Q},K0=($,Y)=>{if(typeof $!=="string")throw new TypeError("Expected a `target`");return O1({...Y,target:$})},A3=($,Y)=>{if(typeof $!=="string")throw new TypeError("Expected a `name`");const{arguments:K=[]}=Y||{};if(K!==void 0&&K!==null&&!Array.isArray(K))throw new TypeError("Expected `appArguments` as Array type");return O1({...Y,app:{name:$,arguments:K}})},x1={};Y0(x1,"chrome",()=>Z0({darwin:"google chrome",win32:"chrome",linux:["google-chrome","google-chrome-stable","chromium"]},{wsl:{ia32:"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",x64:["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe","/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]}}));Y0(x1,"firefox",()=>Z0({darwin:"firefox",win32:"C:\\Program Files\\Mozilla Firefox\\firefox.exe",linux:"firefox"},{wsl:"/mnt/c/Program Files/Mozilla Firefox/firefox.exe"}));Y0(x1,"edge",()=>Z0({darwin:"microsoft edge",win32:"msedge",linux:["microsoft-edge","microsoft-edge-dev"]},{wsl:"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"}));K0.apps=x1;K0.openApp=A3;Q$.exports=K0});async function A($,Y=[]){try{const K=Bun.spawnSync([$,...Y.filter(R)],{stdio:["inherit","pipe","pipe"],env:process.env});if(K.exitCode!==0)return console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.exitCode}`),console.error(new Error().stack),null;return(K.stdout||"").toString()}catch(K){if(F1(K))console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.status}`);else if(K instanceof Error)console.error(K.message);return console.error(new Error().stack),null}}var p=()=>{};function z$({template:$,options:Y,required:K,doubleCurlyBrackets:Z,onError:G,onToken:J}){const Q=new Map,z=new Map,W=new Map,L=new Map;let B=/\$\{([^\}]*)\}/g;if(Z)B=/\$\{\{([^\}]*)\}\}/g;const D=$.replace(B,(q,H)=>{let I="";if(L.set(H,(L.get(H)||0)+1),H in Y){Q.set(H,(Q.get(H)||0)+1);const I0=Y[H];if(I0!==void 0)I=I0}else z.set(H,(z.get(H)||0)+1);if(J){if(I=J(H,I),I!==H)Q.set(H,(Q.get(H)||0)+1),z.delete(H)}return I});Object.keys(Y).forEach((q)=>{if(!Q.get(q))W.set(q,(W.get(q)||0)+1)});const N={resolvedtemplateOptions:Q,template:D,templateProvidedOptions:L,unresolvedProvidedOptions:W,unresolvedTemplateOptions:z};if(K)K.values.forEach((q)=>{if(N.unresolvedProvidedOptions.get(q)){const H=`${K.name}: Could not resolve all the required inputs. Input: ${q}`;if(G)G(H);else console.error(H)}else if(N.unresolvedTemplateOptions.get(q)){const H=`${K.name}: A required option was not provided in the options parameter. Option: ${q}`;if(G)G(H);else console.error(H)}else if(!N.resolvedtemplateOptions.get(q)){const H=`${K.name}: A required option was not provided in the options parameter. Option: ${q}`;if(G)G(H);else console.error(H)}});return N}var _$={};E(_$,{default:()=>F$});import z1 from"fs-extra";import W$ from"hostile";import G0 from"path";import B$ from"valid-url";function O3($){return $&&typeof $==="function"}function H$($,Y,...K){return new Promise((Z,G)=>{const J=$[Y];if(!O3(J)){G(new Error(`${String(Y)} is not a function`));return}J(...K,(Q,z)=>{if(Q)console.warn(Q),G(Q),process.exit(1);else Z(z||void 0)})})}async function x3(){const Y=z1.readJSONSync(G0.resolve("package.json")).hosts;if(!Y)return;const K=Object.keys(Y);let Z=await H$(W$,"get",!1);const G=[];console.warn(X.yellow("Updating hosts file..."));for(let Q of K)try{if(!Z.find((z)=>z[0]===Q&&z[1]===Y[Q]))G.push([Q,Y[Q]])}catch(z){if(z instanceof Error)console.warn(X.red(z.message))}if(G.length>0){console.warn(X.yellow("Adding hosts (You may be prompted for administrator password):\n\t",G.map((z)=>`${z[0]} => ${z[1]}`).join("\n\t"))),await F("sudo",["echo","Granted sudo access to update hosts file."]);const Q=await A("stat",["-f","%p","/etc/hosts"]).toString();await F("sudo",["chmod","666","/etc/hosts"]);for(let z of G)z1.appendFileSync("/etc/hosts",`${z[0]} ${z[1]}`);z1.appendFileSync("/etc/hosts","\n"),await F("sudo",["chmod",Q.substring(Q.length-4).trim(),"/etc/hosts"])}await S(500),console.warn(X.yellow("Verifying hosts file...")),Z=await H$(W$,"get",!1);let J=!1;if(G.forEach(([Q,z])=>{if(!Z.find((W)=>W[0]===Q&&W[1]===Y[Q]))J=!0,console.warn(X.redBright(`Failed to add host: ${X.yellowBright(Q)} => ${X.yellowBright(z)}`))}),J)console.warn(X.red(_`
        *************************************************************************
        * Some hosts specified in the package.json were not able to be written  *
        * to the hosts file for the system. You can amend this by editing the   *
        * file yourself, or by trying to run this script again as an admin.     *
        *************************************************************************
      `))}function L$($,Y,K){let Z=Y;if(B$.isWebUri(Y))Z=Y;else if($[Y])Z=$[Y];const G=z$({options:K,template:Z});if(G.unresolvedTemplateOptions.size>0)throw console.warn(X.red(_`
          You must specify these env variables for this URL to work:
          ${Array.from(G.unresolvedTemplateOptions.keys()).join("\n\t")}
        `)),new Error("Missing env configuration for URL");if(Z=G.template,B$.isWebUri(Z))console.warn("Navigating to:",X.cyanBrightBold(Z)),M$.default(Z);else console.warn("Can not open invalid URL:",X.redBrightBold(Z))}async function F$($,Y){const Z=z1.readJSONSync(G0.resolve("package.json"))?.url||{},G=Y?.reduce((Q,z,W)=>{return Q[`${W+1}`]=z,Q},{})||{};if(!$||$.length<=0){console.warn(_`
      Available URLs:
        ${X.cyanBrightBold(Object.keys(Z).join("\n        "))}
    `);return}await x3();const J={...process.env,...G};if(Array.isArray($))$.forEach((Q)=>{L$(Z,Q,J)});else L$(Z,$,J)}var M$;var b$=M(()=>{M$=l9(X$(),1);O();s();C();p()});import I3 from"child_process";async function $1(){let $="";try{$=I3.execSync("git status --porcelain=v1",{encoding:"utf-8"})}catch(K){return!0}if($.trim().split("\n").filter(Boolean).length===0)return!1;return!0}var I1=()=>{};async function U1($){if($){if(!await v(`
      Would you like to return back to development?
      Runs the following:
        git fetch
        git checkout dev
        git reset --hard origin/dev
    `))return}if(await $1())return console.error("Can not return to dev branch as changes are present on the current branch."),!1;let Y=!1;if(!await F("git",["fetch"]))Y=!0;if(!await F("git",["checkout","dev"]))Y=!0;if(!await F("git",["reset","--hard","origin/dev"]))Y=!0;if(Y)return console.error("Could not return to dev branch."),!1;return!0}var J0=M(()=>{C();I1();J1()});import x from"fs-extra";import U3 from"ignore";import b from"path";async function V3(){const $=await u();console.warn("Building full distribution...");let Y=await Bun.build({entrypoints:[b.resolve("./bin/main.ts")],target:"bun",external:Object.keys($),minify:!0,sourcemap:"inline"});for(let K of Y.outputs)console.warn("Writing bin bundle resource:",X.cyanBrightBold(K.path)),await Bun.write(b.resolve("./dist/bin",K.path),K);console.warn("Building gimped distribution..."),Y=await Bun.build({entrypoints:[b.resolve("./bin/main-gimp.ts")],target:"node",external:Object.keys($),minify:!0,sourcemap:"inline"});for(let K of Y.outputs)console.warn("Writing bin bundle resource:",X.cyanBrightBold(K.path)),await Bun.write(b.resolve("./dist/bin",K.path),K);console.warn("Copying entry cross-platform distribution..."),x.copyFileSync(b.resolve("./bin/main-entry.cjs"),b.resolve("./dist/bin/main-entry.cjs"))}async function T3(){if(!x.existsSync(b.resolve("./bin/shim")))console.error("No shim distribution files found to be built");if(x.existsSync(b.resolve("./shim")))x.removeSync(b.resolve("./shim"));const $=await u();console.warn("Building shim distribution...");const Y=await Bun.build({entrypoints:[b.resolve("./bin/shim/index.ts")],target:"node",external:Object.keys($),minify:!0});for(let Z of Y.outputs)console.warn("Writing shim bundle resource:",X.cyanBrightBold(Z.path)),await Bun.write(b.resolve("./shim/src/bin/shim",Z.path),Z);x.writeFileSync(b.resolve("./shim/index.js"),'export * from "./src/bin/shim/index.js";\n',{encoding:"utf-8"}),x.writeFileSync(b.resolve("./shim/index.d.ts"),'export * from "./src/bin/shim/index.d.ts";\n',{encoding:"utf-8"});const K=x.readJSONSync(b.resolve("tsconfig.json"));if(K.exclude=K.exclude||[],K.exclude.push("./bin/lib/**"),K.include=["./bin/shim"],x.writeJSONSync(b.resolve("tsconfig.temp.json"),K),await S(500),!F("tsc",["-d","--emitDeclarationOnly","--pretty","--outDir",b.resolve("./shim/src/bin"),"--project",b.resolve("tsconfig.temp.json")]))console.warn("Failed to compile type declarations for the shim files."),x.removeSync(b.resolve("tsconfig.temp.json")),process.exit(1);x.removeSync(b.resolve("tsconfig.temp.json"))}async function w3(){console.warn(X.yellowBright("Copying template files for bin distribution"));const $=b.resolve(__dirname,"../../template"),Y=b.resolve("./dist/bin/template");x.copySync($,Y);const K=x.readdirSync(Y).map((J)=>b.resolve(Y,J,"index.ts")).filter((J)=>{if(x.existsSync(J))return!0}),Z=await u();let G=!1;for(let J of K){const Q=await Bun.build({entrypoints:[J],target:"bun",external:Object.keys(Z),minify:!0});if(!Q.success){console.error(X.redBrightBold("Build failed for template:"),X.cyanBrightBold(b.relative(Y,b.dirname(J))));for(let z of Q.logs)console.error(z);G=!0}for(let z of Q.outputs)console.warn("Writing template entry file:",X.cyanBrightBold(b.relative(Y,b.resolve(b.dirname(J),z.path)))),await Bun.write(b.resolve(b.dirname(J),z.path),z)}if(G)console.error(X.redBrightBold("Some templates have errors (see above), stopping the build process.")),process.exit(1)}async function C3(){console.warn(X.yellowBright("Copying entry shell script for bin distribution")),x.copySync(b.resolve("./bin/main-entry.sh"),b.resolve("./dist/bin/main-entry.sh")),x.copySync(b.resolve("./bin/main-entry.ps1"),b.resolve("./dist/bin/main-entry.ps1"))}async function D$(){if(console.warn(X.cyanBright("Building bin commands for the distribution.")),!x.existsSync(b.resolve("./bin/main.ts"))||!x.existsSync(b.resolve("./bin/main-entry.sh"))||Q0.ignores("bin")){console.warn(`Tried to make a release for the bin commands, but no bin/main.ts or bin/main.sh entry file was found. (or was gitignored):\n\t${b.resolve("./bin/main.ts")}\n\t${b.resolve("./bin/main.sh")}`);return}x.ensureDirSync(b.resolve("./dist")),x.ensureDirSync(b.resolve("./dist/bin/template")),await V3(),await T3(),await w3(),await C3()}var __dirname="/Users/diniden/Desktop/VoidRay/dev-ops/node-devops/bin/lib/build/bin",q$,Q0;var N$=M(()=>{O();C();q1();q$=b.resolve(".gitignore"),Q0=U3.default();if(x.existsSync(q$))Q0=Q0.add(x.readFileSync(q$).toString())});import A$ from"fs";import O$ from"path";function x$($){return{name:"vite-devops-string-replace-plugin",enforce:"pre",load(Y){const K=O$.resolve(Y),Z=[".ts",".js",".tsx",".jsx"];if(A$.existsSync(K)&&Z.includes(O$.extname(K))&&!K.includes("node_modules")&&!K.includes("\0")){let G=A$.readFileSync(K,{encoding:"utf-8"});return $.forEach((J)=>{G=G.replace(J.from,J.to)}),G}}}}var I$=()=>{};import U from"fs-extra";import V from"path";function U$($){const Y=process.env.PROJECT_ROOT||".",K=V.resolve(Y,"app/config");if(!U.existsSync(K)){console.warn(`viteDevopsAppConfigPlugin: ${X.cyanBrightBold("No app/config folder found.")}`);return}try{const Z=U.readdirSync(K).filter((B)=>{return U.statSync(V.join(K,B)).isDirectory()}),G=Z.map((B)=>V.join(K,B)),Q=Z.map((B,D)=>{if(!$)if(U.existsSync(V.join(G[D],`${B}.local`))||U.existsSync(V.join(G[D],`${B}.local.js`))||U.existsSync(V.join(G[D],`${B}.local.ts`))||U.existsSync(V.join(G[D],`${B}.local.tsx`))||U.existsSync(V.join(G[D],`${B}.local.jsx`)))return[{from:`"config/${B}/${B}"`,to:`"config/${B}/${B}.local"`},{from:`"config/${B}/${B}.js"`,to:`"config/${B}/${B}.local.js"`},{from:`"config/${B}/${B}.ts"`,to:`"config/${B}/${B}.local.ts"`}];else return[];return[{from:`"config/${B}/${B}"`,to:`"config/${B}/${B}.${$}"`},{from:`"config/${B}/${B}.js"`,to:`"config/${B}/${B}.${$}.js"`},{from:`"config/${B}/${B}.ts"`,to:`"config/${B}/${B}.${$}.ts"`}]}).reduce((B,D)=>B.concat(D),[]),L=[...!$&&(U.existsSync(V.join(K,"env.local"))||U.existsSync(V.join(K,"env.local.js"))||U.existsSync(V.join(K,"env.local.ts"))||U.existsSync(V.join(K,"env.local.tsx"))||U.existsSync(V.join(K,"env.local.jsx")))?[{from:'"config/env"',to:'"config/env.local"'},{from:'"config/env.js"',to:'"config/env.local.js"'},{from:'"config/env.ts"',to:'"config/env.local.ts"'}]:$?[{from:'"config/env"',to:`"config/env.${$}"`},{from:'"config/env.js"',to:`"config/env.${$}.js"`},{from:'"config/env.ts"',to:`"config/env.${$}.ts"`}]:[],...Q];if(L.length>0)console.warn(`

  ${X.yellowBrightBold("Using the following mappings for app config:")}

  \t${X.cyanBrightBold(L.map((B)=>`\n  ${B.from} => ${B.to}`).join("\n\t"))}

      `);return x$(L)}catch(Z){console.error(Z),console.error(X.redBrightBold(`
      App config plugin failed to load. The default config paths will be used
      and any specific environment requested will be ignored.
    `))}}var V$=M(()=>{O();I$()});import*as w$ from"vite";import V1 from"fs-extra";import S3 from"ignore";import Y1 from"path";async function C$($){if(console.warn(X.cyanBright("Building client files for the distribution.")),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await T(),process.env.FORCE_BUILD!=="true"){if(!V1.existsSync(Y1.resolve("app/client"))||X0.ignores("app/client")){console.error(`Tried to make a release for the web app client, but no app/client entry file was found. (or was gitignored):\n\t${Y1.resolve("app/client")}`);return}}const Y="development";process.env.NODE_ENV="production",console.warn(`Releasing ${X.yellowBrightBold("app/client")} for Environment:`,X.cyanBrightBold($)),process.env.BUILD_ENV=$;const K=await t();if(K.plugins=[U$($),...K.plugins||[]],K.logLevel="warn",K.mode="production",K.root=Y1.resolve("app/client"),K.build.outDir=Y1.resolve("dist/app/client",$),K.build.watch=void 0,K.build.rollupOptions.output={dir:K.build.outDir,entryFileNames:"index.js",chunkFileNames:"index.js",manualChunks:void 0},await w$.build(K),process.env.NODE_ENV=Y,!V1.existsSync(Y1.resolve(`dist/app/client/${$}/index.js`)))console.error("\n\nFailed to create Client output bundle. Exiting process...\n\n"),process.exit(1)}var T$,X0;var S$=M(()=>{b1();O();m();V$();T$=Y1.resolve(".gitignore"),X0=S3.default();if(V1.existsSync(T$))X0=X0.add(V1.readFileSync(T$).toString())});async function K1($=[],Y){const K=await k();if(K1.optimize){if(K[1]==="bunx")return F(K[1],[Y?.excludeBunFlag?null:"--bun",...$].filter(R))}return F(K[1],[...$])}var z0=M(()=>{C();o();K1.optimize=!0});import T1 from"fs-extra";import W1 from"path";async function w1(){if(!T1.existsSync(W1.resolve("ui")))return;T1.ensureDirSync(W1.resolve("dist/types")),console.warn(X.yellowBrightBold("Generating .d.ts files...")),K1(["tsc","--emitDeclarationOnly","--declaration","--outDir","dist/types","--project",W1.resolve("tsconfig.json")]);const $=T1.readdirSync(W1.resolve("dist/types"));for(let Y of $){if(Y==="ui"||Y==="util")continue;console.warn(X.yellowBright(`Removing types for folder: ${Y}`)),T1.removeSync(W1.resolve("dist/types",Y))}}var W0=M(()=>{O();z0()});import j$ from"fs-extra";import E$ from"path";async function R$(){return j$.readJSONSync(E$.resolve("package.json")).name||""}var k$=()=>{};import*as P$ from"vite";import C1 from"fs";import j3 from"ignore";import d from"path";async function v$(){if(console.warn(X.cyanBright("Copying ui files for the distribution.")),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await T(),!process.env.FORCE_BUILD){if(!C1.existsSync(d.resolve("ui"))||B0.ignores("ui")){console.error(`"No library project found (or was gitignored) for bundling release at:\n\t${d.resolve("ui")}`);return}}if(console.warn(X.yellowBrightBold("Starting Vite client build...")),!C1.existsSync(d.resolve("ui/index.ts"))){console.error("The UI folder project has no index.ts entry point to create the library.");return}await w1(),console.warn(X.yellowBrightBold("Building library bundle..."));const $=await t();$.logLevel="warn",$.root=d.resolve("ui"),$.build.lib={entry:d.resolve("ui/index.ts"),name:(await R$()).split("@").join("").split("/").join("_"),fileName:"index"},$.mode="production",$.root=d.resolve("app/client"),$.build.outDir=d.resolve("dist/ui"),$.build.watch=void 0,$.build.rollupOptions.output={dir:$.build.outDir,entryFileNames:"index.js",chunkFileNames:"index.js",manualChunks:void 0};const Y=Object.keys(await u());console.warn("Externalized Libraries that will not be included in the bundle:",Y),$.build.rollupOptions={...$.build.rollupOptions,external:Y},await P$.build($)}var y$,B0;var m$=M(()=>{b1();O();W0();q1();k$();m();y$=d.resolve(".gitignore"),B0=j3.default();if(C1.existsSync(y$))B0=B0.add(C1.readFileSync(y$).toString())});import i from"fs-extra";import f from"path";async function f$(){process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await T(),console.warn(X.cyanBright("Copying story files for the distribution."));const $=f.resolve("dist/stories"),Y=f.resolve("ui/stories"),K=f.resolve("dist");if(!i.existsSync(Y)){console.error(`Could not find stories directory:\n\t${Y}`);return}i.ensureDirSync($),i.copySync(Y,$);const Z=f.resolve("package.json"),J={name:i.readJSONSync(Z).name||"unknown",private:!0,type:"module",main:"./ui/index.js",types:"./types/ui/index.d.ts",dependencies:{},repository:{},scripts:{},devDependencies:{}};console.warn("Writing distribution package.json:",f.resolve(K,"package.json")),i.writeJSONSync(f.resolve(K,"package.json"),J),await S(500),i.ensureDirSync(f.resolve(K,"components")),J.main="../ui/index.js",J.types="../types/ui/index.d.ts",console.warn("Writing distribution package.json:",f.resolve(K,"components/package.json")),i.writeJSONSync(f.resolve(K,"components/package.json"),J),await S(500),console.warn("Finished copying stories.")}var g$=M(()=>{O();m()});var u$={};E(u$,{default:()=>j1});import S1 from"fs-extra";import Z1 from"path";async function E3(){if(process.env.QUICK_BUILD==="true")return;if(await c("release",["view"]),!await v("\nShould the release continue being made?"))await U1(!0),process.exit(1)}async function R3(){console.warn("Gathering build targets from:",X.yellowBright(Z1.resolve("build.conf.js")));const $=(await import(Z1.resolve("build.conf.js"))).BUILD_TARGETS;if(process.env.NODE_ENV="production",console.warn("Building environments",X.redBrightBold(JSON.stringify($))),!Array.isArray($))console.error("build.conf.js must be an array of string values"),process.exit(1);for(let Y of $)await C$(Y);await v$(),await f$(),await D$()}async function k3(){try{S1.removeSync(Z1.resolve("dist"))}catch($){console.warn("No dist folder to clean out.")}S1.ensureDirSync(Z1.resolve("dist"))}async function y3(){try{S1.removeSync(Z1.resolve("dist/test"))}catch($){console.warn("No test folder to clean out")}try{S1.removeSync(Z1.resolve("dist/unit-test"))}catch($){console.warn("No unit-test folder to clean out")}}async function j1(){console.warn("Validating the release..."),await E3(),console.warn("Clear previous build..."),await k3(),console.warn("Bundling project..."),await R3(),console.warn("Final cleanup..."),await y3(),console.warn("Release Build complete!")}var H0=M(()=>{O();D1();J0();J1();N$();S$();m$();g$()});var p$={};E(p$,{default:()=>R1});import l$ from"fs-extra";import P3 from"lodash/groupBy.js";import E1 from"path";import v3 from"lodash/uniq.js";import m3 from"lodash/upperFirst.js";import{compare as f3,inc as g3}from"semver";function l3($){const Y=$.toLowerCase().split("\n").map((K)=>(K.match(/## (\w+)/)||[])[1]).filter(Boolean);if(Y.includes("breaking"))return"major";if(Y.includes("added"))return"minor";return"patch"}async function c3($){console.warn("Building release notes..."),console.warn("fetching tags...");const Y=await A("git",["tag","--list"]);if(Y===null)console.error("Could not get git tags"),process.exit(1);const K=Y.trim().split("\n").sort(f3),Z=K[(K.includes($)?K.indexOf($):K.length)-1];console.warn("fetching version hash...");const G=await A("git",["rev-list","-1",`${$}`]);if(G===null)console.error("Couldn't get current version hash"),process.exit(1);const J=G.trim();console.warn("fetching previous version hash...");let Q=await A("git",["rev-list","-1",`${Z}`]);if(Q===null){if(Q=await A("git",["rev-list","--max-parents=0","HEAD"]),Q===null)console.error("Couldn't get previous version hash"),process.exit(1)}const z=Q.trim();console.warn("fetching logs...");const W=await A("git",["log","--pretty=%B",`${z}...${J}`]);if(W===null)console.error("Couldn't get logs"),process.exit(1);const L=W.split("\n").map((N)=>{const[,q="",H=""]=N.match(/^\s*(\w+?)\s*:\s*(.*)\s*$/)||[];return{tag:c$[q.toLowerCase()],message:m3(H)}}).filter((N)=>N.tag),B=P3(L,"tag"),D=h3.filter((N)=>B[N]).map((N)=>{const q=B[N];return`## ${N.replace(/(\w)/,(H)=>H.toUpperCase())}\n\n${q.map(({tag:H,message:I})=>`- [\`${H.toUpperCase()}\`]: ${I}`).join("\n")}`}).join("\n\n");return console.warn("New release notes completed"),D}async function R1($={}){if(console.warn("Generating Release Notes..."),await A("git",["fetch","--tags"])===null)console.error("Couldn't fetch tags"),process.exit(1);const K=d$(E1.resolve("package.json")),{version:Z="0.0.1"}=K;console.warn("Current Project version:",{currentVersion:Z});const G=await c3("HEAD"),J=l3(G),Q=J&&g3(Z,J);if(!Q)console.error("Unable to determine next version",{currentVersion:Z}),process.exit(1);if($.tag){if(console.warn("Creating the new tag..."),await A("git",["tag","-a",Q,"-m",`Release ${Q}`])===null)console.error("Couldn't create tag"),process.exit(1)}if($.updatePackage){console.warn("Updating the package.json...");const W=d$(E1.resolve("package.json"));W.version=Q,h$(E1.resolve("package.json"),`${JSON.stringify(W,null,"  ")}\n`)}const z=`## ${Q}\n\n${G}`;if(!G.trim()&&$.errorOnEmpty)throw new Error("No notes were generated as no semver style messages were found");if($.file){console.warn("Writing the release notes to file:",$.file);const W=E1.resolve($.file),L=u3(W)?d3(W):"";h$(W,`${`${z}\n\n${L}`.trim()}\n`);for(let D=0;D<=100;++D){if(l$.existsSync(W))break;if(D===100)console.warn("Release notes file was not created in time for the final release commit:",X.redBrightBold(W)),process.exit(1)}if(await S(1000),console.warn("Adding fragments to git..."),await A("git",["add","-A"])===null)console.warn("Could not ensure all fragments are added for the next commit."),process.exit(1);if(console.warn("Committing to git..."),await A("git",["commit","-am",`Release ${Q}`])===null)console.error("Couldn't commit changes"),process.exit(1);console.warn(`\n\n${X.cyan(z)}\n\n`)}else console.warn(`\n\n${X.cyan(z)}\n\n`);process.env.VITE_RELEASE_VERSION=Q}var u3,d3,d$,h$,c$,h3;var L0=M(()=>{O();p();({existsSync:u3,readFileSync:d3,readJSONSync:d$,writeFileSync:h$}=l$),c$={breaking:"breaking",feat:"added",feature:"added",added:"added",fix:"fixed",fixed:"fixed",hotfix:"fixed",task:"task"},h3=v3(Object.values(c$))});import M0 from"fs";import F0 from"path";async function _0($,Y){try{if(M0.statSync($).isFile()){if(Y)return Y.push($),Y;return[$]}const K=M0.readdirSync($);let Z=Y||[];for(let G of K)if(M0.statSync(F0.resolve($,G)).isDirectory())Z=await _0(F0.resolve($,G),Z);else Z.push(F0.resolve($,G));return Z}catch(K){if(K instanceof Error)console.error("getAllFiles Path:",$),console.error("getAllFiles Error:",K.message);throw K}}var i$=()=>{};async function k1($){return F("git",["ls-remote",$])}var b0=M(()=>{C()});async function n$($){const Y=await A("git",["remote","-v"]);if(Y===null)console.warn("Could not list remotes for the git project."),process.exit(1);const K=Y.split(/\r?\n/g),Z=K.find((J)=>J.indexOf($)>=0);if(!Z)console.warn(_`
      You MUST have a remote named ${$} which points to the repository you
      wish to deploy to.

      ${K.join("\n")}
    `),process.exit(1);const G=Z.split(/\s+/g)[1];if(!k1(G))console.warn(`
      You do not seem to have access to the repo listed in the package json of
      this project. Please ensure you have write access to the repo:
      ${G}
      and then try to run the release again.
    `),process.exit(1)}var s$=M(()=>{s();p();b0()});async function o$(){const $=await A("git",["rev-parse","--abbrev-ref","HEAD"]);if($===null){console.error("Failed to determine current branch.");return}return $.trim()||void 0}var a$=M(()=>{p()});var t$=async($,Y)=>{const K=await o$();if(!K)return console.warn("Could not determine current branch."),!1;if(await A("git",["checkout",`${Y}`])===null)return console.warn(`Could not checkout branch ${Y}`),!1;if(await A("git",["reset","--hard",`${$}/${Y}`])===null){if(console.warn(`Could not reset branch ${Y}`),await A("git",["checkout",`${K}`]))console.warn(`Could not return to original branch ${K}`);return!1}if(await A("git",["checkout",`${K}`])===null)return console.warn(`Could not return to original branch ${K}`),!1;return!0};var r$=M(()=>{p();a$()});import e$ from"fs-extra";import $9 from"path";async function Y9(){return e$.readJSONSync($9.resolve("package.json")).repository||{}}var K9=()=>{};var J9={};E(J9,{default:()=>G9});import y1 from"fs-extra";import B1 from"path";async function p3(){const $=await Y9(),Y=$.url;if(!$||!($.type!=="gitlab"||$.type!=="git"||$.type!=="bitbucket"||$.type!=="stash"))console.warn(`
      You MUST have a repository specified in your package json to use the
      release script. It must be of 'type: git' and have a valid ssh url to
      your git repo.

      Additionally, you MUST have a remote configured for your project of
      'origin' that matches the repo url listed in your package.json.

      Thus: "git remote -v" SHOULD output a line with
      origin <url in your package json repository field> (push)
    `),process.exit(1);const K=await A("git",["remote","-v"]);if(K===null)console.warn("Could not list remotes for the git project."),process.exit(1);const Z=K.split(/\r?\n/g);if(!Z.find((J)=>J.indexOf(n)>=0&&J.indexOf(Y)>=0))console.warn("Could not match package json repository to an origin remote in git CLI",{remoteListProcess:K,remotes:Z,ENSURE_REMOTE:n,ENSURE_REMOTE_PROJECT:Y}),process.exit(1);if(!k1(Y))console.warn(`
      You do not seem to have access to the repo listed in the package json of
      this project. Please ensure you have write access to the repo:
      ${Y}
      and then try to run the release again.
    `),process.exit(1);if(await $1())console.error("You have uncommitted changes or the current state of the project can not be determined. Please commit or stash them before continuing."),process.exit(1);console.warn("Repository validation complete")}async function i3(){if(!await await F("git",["checkout","release"])){if(!await F("git",["checkout","-b","release"]))console.warn("Could not switch to the release branch. Make sure the branch exists locally."),process.exit(1)}if(!await F("git",["fetch",`${n}`]))console.warn("Could not fetch from remote servers."),process.exit(1);if(!await F("git",["reset","--hard",`${n}/dev`]))console.warn("Could not reset branch to dev"),process.exit(1);console.warn("Checked out release branch and updated to dev")}function n3(){try{const Y=y1.readFileSync(B1.resolve("RELEASE_NOTES.md"),"utf8").toLowerCase().split("\n").map((K)=>(K.match(/## (\w+)/)||[])[1]).filter(Boolean);if(Y.includes("breaking"))return"major";if(Y.includes("added"))return"minor";return"patch"}catch($){console.error("Could not determine release type after release was created"),process.exit(1)}}async function s3($){const Y=await T();if(!await F("git",["add","-A"]))console.warn("Could not ensure all fragments are added for the next commit."),process.exit(1);const K=B1.resolve("dist/stories");_0(K),await S(500),await R1({file:"RELEASE_NOTES.md",updatePackage:!0});const Z=await T();if(Y===Z)console.warn(`
      The release script did not detect any changes for a release. If you find
      this to be in error or you want to force a new release. Make some commits
      with proper release note formatted messages to trigger a release.
    `),process.exit(1);if($){if(n3()!=="patch")console.error(`
        Cannot create a release for an alternate branch that is not a simple
        patch. Features and breaking changes can ONLY be made on the main branch of
        development.
      `),process.exit(1)}const G=await A("git",["log","-1","--pretty=%B"]);if(G===null)console.warn("Could not read the last commit version information"),process.exit(1);const J=(G.trim().toLowerCase().split("release ")[1]||"").trim();if(!J)console.warn("Could not determine release version from the last commit:\n\n",G.toString(),"\n\n"),process.exit(1);if(y1.existsSync(B1.resolve("ui/release.json"))){try{const Q=y1.readJSONSync(B1.resolve("ui/release.json"));Q.version=J,y1.writeJSONSync(B1.resolve("ui/release.json"),Q)}catch(Q){console.warn("Could not update the release.json file with current library version."),process.exit(1)}if(!await F("git",["add","-A"]))console.warn("Could not ensure the release json was updated for the new version."),process.exit(1);if(!await F("git",["commit","--amend","--no-edit"]))console.warn("Could not amend the release commit to include the release json file."),process.exit(1)}if(J.includes('"'))console.warn("The update version generated is invalid as it contains invalid characters",{version:J}),process.exit(1);return console.warn("Updating version to",{version:J}),J}async function o3($){if(!await F("git",["tag","-a",$,"-m",`Release ${$}`]))console.warn("Could not make tag for git commit"),process.exit(1)}async function Z9($,Y,K,Z,G){if(!await F("git",["push",G?"-f":void 0,$,`${K}:${Z}`]))console.warn(`Could not push release commit to ${$}`),process.exit(1);if(!await F("git",["push",$,Y]))console.warn("Could not push tag to the remote repository"),process.exit(1)}async function a3($,Y){if($&&$.length>0){if(!await v(_`
        The build and release was successful, would you like to release to the
        specified additional remotes?

        ${X.cyanBrightBold($.join("\n"))}
      `))return}if(!await F("git",["fetch",n]))console.warn("Could not fetch from remote servers."),process.exit(1);for(let K of $){const[Z,G,J,Q]=K.split(":");await n$(Z),await t$(n,G||"master"),await Z9(Z,Y,G||"master",J||"master",Q==="force")}}async function t3($){process.env.NODE_ENV="production",await p3(),await i3(),await j1();const Y=await s3();if(await o3(Y),await Z9(n,Y,"release","release",!0),await v("Would you like to run pr release?"))await c("pr",["release"]);await a3($,Y),await U1(!0),process.exit(0)}async function G9($){console.warn("Executing release script"),t3($)}var n="origin";var Q9=M(()=>{H0();L0();O();s();D1();C();p();i$();b0();s$();I1();J0();r$();J1();K9();m()});var z9={};E(z9,{default:()=>X9});async function X9(){await w1()}var W9=M(()=>{W0()});var q0={};E(q0,{default:()=>H9});import g from"fs-extra";import r3 from"ignore";import j from"path";async function e3($){const Y=g.readJSONSync(j.resolve("tsconfig.json"));if(Y.exclude=Y.exclude||[],Y.include=(Y?.include||[]).filter((Z)=>!P1.ignores(j.relative("./",Z))),g.writeJSONSync(j.resolve("tsconfig.temp.json"),Y),await S(500),$==="watch"){const Z=async()=>{console.warn("Exit TS process");try{g.removeSync(j.resolve("tsconfig.temp.json"))}catch(G){}process.exit(0)};process.on("exit",Z),process.on("SIGINT",Z),process.on("SIGUSR1",Z),process.on("SIGUSR2",Z),process.on("SIGTERM",Z),process.on("uncaughtException",Z)}if(!F("tsc",["-d",$==="watch"?"--watch":"","--incremental","--noemit","--pretty","--tsBuildInfoFile",j.resolve("node_modules/.cache/tsc/tsc.tsbuildinfo"),"--outDir",j.resolve("dist"),"--project",j.resolve("tsconfig.temp.json")]))console.warn("Failed to compile type declarations"),g.removeSync(j.resolve("tsconfig.temp.json")),process.exit(1);const K=(Y?.include||[]).filter((Z)=>!P1.ignores(j.relative("./",Z))).map((Z)=>j.resolve(Z)).filter((Z)=>g.existsSync(Z)&&!Z.includes("node_modules"));if(K.length>0){if(!F("eslint",[...K,"-c",j.resolve(".eslintrc"),"--ext",".ts","--ext",".tsx"]))console.warn("Failed eslint checks."),g.removeSync(j.resolve("tsconfig.temp.json")),process.exit(1)}g.removeSync(j.resolve("tsconfig.temp.json"))}async function H9($){await e3($)}var B9,P1;var D0=M(()=>{C();B9=j.resolve(".gitignore"),P1=r3.default();if(g.existsSync(B9))P1=P1.add(g.readFileSync(B9).toString())});var M9={};E(M9,{default:()=>L9});async function L9(){console.warn(X.yellowBrightBold("Starting server...")),await X1()}var F9=M(()=>{i1();O()});var N9={};E(N9,{default:()=>D9});import $4 from"fs-extra";import N0 from"path";async function q9($){if(!$4.existsSync($))return console.warn("Attempted to start a server but no server distribution was found at",$),!1;return await F("bun",[`${$}`]),!0}async function _9(){const $=N0.resolve("docs/index.js");return await q9($)}async function b9(){process.env.RESOURCE_PATH=N0.resolve("dist/app/client");const $=N0.resolve("dist/app/server/index.js");return await q9($)}async function D9($,Y){const{PORT:K="80"}=process.env;process.env.PORT=K;let Z=!1;switch($){case"app":Z=await b9();break;case"devops":Z=await _9();break;default:if($)console.warn("Invalid target for start script specified",$);break}if(!Z){if(Z=await b9(),Z)return;if(Z=await _9(),Z)return}}var A9=M(()=>{C()});import Y4 from"fs-extra";import A0 from"path";async function O9(){const $=A0.resolve("tsconfig.json");if(!Y4.existsSync($))throw new Error("Target project does not have a TSConfig");const Y=Boolean(process.env.DEBUG),K=process.env.PATTERN,Z=process.env.WATCH,G=process.env.LESS,J=A0.resolve("jest.config.js");F.silent=!0;try{if(Y)F("node",["--inspect-brk",A0.resolve("node_modules/.bin/jest"),"--runInBand",Z?"--watchAll":"","--verbose",G==="true"?"false":void 0,"--colors","--config",J,K?`--testNamePattern ${K}`:""]);else K1(["jest",Z?"--watchAll":"","--verbose",G==="true"?"false":void 0,"--colors","--config",J,K?`--testNamePattern=${K}`:""],{excludeBunFlag:!0})}catch(Q){console.warn("Tests failed. Please look at logs to see the errors discovered")}console.warn(X.cyanBright("Tests complete"))}var x9=M(()=>{O();z0();C()});var U9={};E(U9,{default:()=>I9});async function I9(){console.warn("Running unit tests..."),await O9()}var V9=M(()=>{x9()});var j9={};E(j9,{default:()=>S9});import T9 from"fs";import w9 from"path";import C9 from"rimraf";async function S9(){const $=w9.resolve("./node_modules/.cache/"),Y=w9.resolve("./build");if(T9.existsSync($))C9.sync($),console.warn("Cache: Clean complete");else console.warn("Cache: Already clean");if(T9.existsSync(Y))C9.sync(Y),console.warn("Build: Clean complete");else console.warn("Build: Already clean");if(await F("bun",["pm","cache","rm"]))console.warn("Bun: Clean complete");else console.warn("Bun: Already clean")}var E9=M(()=>{C()});import R9 from"path";import{createRequire as K4}from"module";async function v1($,Y){const G=K4(import.meta.url).resolve($).split("node_modules"),J=G[0],Q=G[1].split(R9.sep)[1];return R9.join(J,"node_modules",Q,"node_modules",".cache",Y)}var k9=()=>{};var P9={};E(P9,{default:()=>y9});import Z4 from"fs-extra";import G1 from"path";import G4 from"url";async function J4($,Y,K){const Z=await import("puppeteer"),G=await v1("puppeteer","pr-release"),J=await Z.launch({headless:!1,userDataDir:G1.resolve(H1,G),defaultViewport:null}),Q=await J.newPage();console.warn("Opening project url..."),await Q.goto($);const z=await Q.evaluate(()=>document.body.getAttribute("data-project-id"));if(!z){console.warn("No project id found, User login required...");let L=!0;J.on("disconnected",()=>{if(!L)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)}),await Q.goto($),await Q.waitForFunction(()=>{const B=document?.body?.getAttribute("data-project-id");return B!==null&&B!==void 0},{timeout:0}),await Q.close(),L=!1}else await Q.close();console.warn("Project ID found:",z,"\nOpening merge request...");const W=async(L,B,D)=>{const N=await J.newPage();await N.goto(`${$}/-/merge_requests/new?${D?"utf8=%E2%9C%93&":""}merge_request%5Bsource_project_id%5D=${z}&merge_request%5Bsource_branch%5D=${encodeURIComponent(L)}&merge_request%5Btarget_project_id%5D=${z}&merge_request%5Btarget_branch%5D=${B}`),await N.waitForFunction(()=>{const q=document.querySelector("#merge_request_title");return q!==null&&q!==void 0},{timeout:0}),await N.evaluate((q)=>{let H=document.querySelector("#merge_request_title");if(H)H.value=`Release ${q}`;if(H=document.querySelector("#merge_request_description"),H)H.value=`Release ${q}`;if(H=document.querySelector("#merge_request_force_remove_source_branch"),H)H.checked=!1,H.value="0"},Y),await new Promise((q)=>{N.on("close",()=>{q(void 0),console.warn("Gitlab ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([W("release","dev"),W("release",K)]),J.close()}async function O0($,Y,K,Z){const G=await import("puppeteer"),J=await v1("puppeteer","pr-release");let Q=await G.launch({headless:!Z,userDataDir:G1.resolve(H1,J),defaultViewport:null});const z=await Q.newPage();if(Z){console.warn("User login required...");let D=!0;Q.on("disconnected",()=>{if(!D)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)});const N="https://github.com/login";console.warn("Opening github login page: ",N),await z.goto(N),await z.waitForFunction(()=>{const q=document?.body?.getAttribute("class")?.split(" ").find((H)=>H.startsWith("logged-in"));return q!==null&&q!==void 0},{timeout:0}),D=!1}else console.warn("Opening project url: ",$),await z.goto($);console.warn("Checking for logged-in attribute on body...");const W=await z.evaluate(()=>{return console.warn("logged-in check:",document?.body?.getAttribute("class")?.split(" ").find((D)=>D.startsWith("logged-in"))),document?.body?.getAttribute("class")?.split(" ").find((D)=>D.startsWith("logged-in"))});if(console.warn("Loggin in check:",W),!W&&Z)await Q.close(),console.error("Failed to log in the user for github."),process.exit(1);else if(!W){console.warn("Logged-in not found on body, login might be needed..."),await Q.close(),O0($,Y,K,!0);return}else Q.close();const L={headless:!1,userDataDir:G1.resolve(H1,J),defaultViewport:null};Q=await G.launch(L);const B=async(D,N)=>{const q=await Q.newPage();await q.goto(`${$}/compare/${N}...${D}`),await q.waitForFunction(()=>{const H=document.querySelector("#repo-content-pjax-container > div > div.js-details-container.Details.js-compare-pr > div > button");return H?.click(),H!==null&&H!==void 0}),await q.evaluate(async(H)=>{let I=document.querySelector("#pull_request_title");if(I)I.value=`Release ${H}`;if(I=document.querySelector('[name="pull_request[body]"]'),I)I.value=`Release ${H}`},Y),await new Promise((H)=>{q.on("close",()=>{H(void 0),console.warn("Github ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([B("release","dev"),B("release",K)]),Q.close()}async function Q4($,Y,K,Z){const G=await import("puppeteer"),J=await v1("puppeteer","pr-release");let Q=await G.launch({headless:!Z,userDataDir:G1.resolve(H1,J),defaultViewport:null});const z=await Q.newPage();if(Z){console.warn("User login required...");let D=!0;Q.on("disconnected",()=>{if(!D)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)});const N=$;console.warn("Opening azure repo login page: ",N),await z.goto(N),await z.waitForFunction(()=>{const q=window.sessionStorage.msameid;return q!==null&&q!==void 0},{timeout:0}),D=!1}else console.warn("Opening project url: ",$),await z.goto($);console.warn("Checking for logged-in attribute on body...");const W=await z.evaluate(()=>{return console.warn("logged-in check:",window.sessionStorage.msameid),window.sessionStorage.msameid});if(console.warn("Loggin in check:",W),!W&&Z)await Q.close(),console.error("Failed to log in the user for azure."),process.exit(1);else if(!W){console.warn("MS id not found, login might be needed..."),await Q.close(),O0($,Y,K,!0);return}else Q.close();const L={headless:!1,userDataDir:G1.resolve(H1,J),defaultViewport:null};Q=await G.launch(L);const B=async(D,N)=>{const q=await Q.newPage();await q.goto(`${$}&sourceRef=${D}&targetRef=${N}`),await q.waitForFunction(()=>{const H=document.querySelector("button.primary");return H!==null&&H!==void 0}),await q.evaluate(async(H)=>{let I=document.querySelector('[aria-label="Enter a title"]');if(I)I.value=`Release ${H}`;if(I=document.querySelector('[aria-label="Description"]'),I)I.value=`Release ${H}`},Y),await new Promise((H)=>{q.on("close",()=>{H(void 0),console.warn("Azure project ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([B("release","dev"),B("release",K)]),Q.close()}async function y9($,Y,K="master",...Z){if(!(new Set(["gitlab","git","github","azure"])).has(Y))console.error(`Unsupported repo type: ${Y}`),process.exit(1);if(await $1())console.error("You have uncommitted changes or the current state of the project can not be determined. Please commit or stash them before continuing."),process.exit(1);const Q=Z4.readJsonSync(G1.resolve("package.json")).version;switch(Y){case"gitlab":await J4($,Q,K);break;case"git":case"github":await O0($,Q,K);break;case"azure":await Q4($,Q,K);break;default:console.warn("No supported repo type found")}}var H1;var v9=M(()=>{k9();I1();H1=G4.fileURLToPath(new URL(".",import.meta.url))});O();import*as X4 from"commander";import z4 from"inquirer-autocomplete-prompt";import W4 from"inquirer";import m9 from"path";import B4 from"yargs";O();s();import j0 from"fs-extra";import E0 from"path";O();import V0 from"fs";import T0 from"path";function U0($){const Y=$.split(/\r?\n/),K={};let Z=null,G=null;return Y.forEach((J)=>{if(J=J.trim(),J===""||J.startsWith("#"))return;if(J.endsWith("{")){Z=J.split(/\s+/)[0],K[Z]={};return}if(J==="}"){Z=null,G=null;return}const Q=J.match(/^([\w.]+)\s*=\s*(.*)$/);if(Q){const W=Q[1];let L=Q[2];if(!isNaN(parseFloat(L)))L=parseFloat(L);else if(L==="true")L=!0;else if(L==="false")L=!1;if(G)K[Z??"null"][G][W]=L;else if(Z)K[Z][W]=L;else K[W]=L;return}const z=J.match(/^([\w.]+)\.([\w.]+)\s*=\s*(.*)$/);if(z){const W=z[1],L=z[2],B=z[3];if(!K[W])K[W]={};if(!K[W][L])K[W][L]={};K[W][L][B]=null,Z=W,G=L;return}console.error(`Unrecognized line: ${J}`)}),K}function w0($){try{if(!V0.existsSync(T0.resolve(".env")))return;const Y=V0.readFileSync(T0.resolve($||".env"),"utf8"),K=U0(Y);Object.entries(K).forEach(([Z,G])=>{if(typeof G==="string")process.env[Z]=G;else if(typeof G==="number")process.env[Z]=G.toString();else if(typeof G==="boolean")process.env[Z]=G.toString()})}catch(Y){if(Y instanceof Error)console.error(X.red("Error reading .env file:\n",X.yellow(Y.stack||Y.message)))}}J1();import s9 from"fs-extra";import o9 from"inquirer";import{stripIndent as a9}from"common-tags";async function S0($,Y,K,Z,G,J){let Q=J||!1;if(s9.existsSync($)){const{result:z}=await o9.prompt([{type:"confirm",name:"result",message:a9`${Y}`,default:J}]);if(z)K($),G?.($);Q=z}else K($),Z?.($);return Q}async function t9(){const $=(await import(E0.resolve("env.config.ts"))).default;if(!$)throw new Error("No env.config.ts file found.");if(!Array.isArray($))console.error("env.config.ts is not formatted correctly. Please follow the correct type convention.");return $}async function g1($){w0();try{const Y=await t9(),K=[],Z=[];if(Y.forEach((G)=>{if(!G)return;if(G.required){if(!process.env[G.name])K.push(_`
              Missing: ${G.name}\nDesription: ${G.description}
            `)}else if(!process.env[G.name]&&G.warn!==!1)Z.push(_`
              Missing: ${G.name}\nDesription: ${G.description}
            `)}),Z.length>0)console.warn(X.yellowBrightBold("The following environment variables are recommended but missing from your environment:\n")),console.warn(X.yellowBright(_`
          ${Z.join("\n")}
        `));if(K.length>0)console.error(X.redBrightBold("The following environment variables are required but missing from your environment:\n")),console.error(X.redBright(_`
          ${K.join("\n")}
        `));if(K.length>0){if($){if(await v(_`
          There seems to be some missing environment variables. Would you like
          to generate a .env file with the default values specified in the
          env.config file?
        `)){const J=[];for(let L of Y)J.push([L.name,C0(L.default)?L.default:R(L.default)?await L.default():void 0]);const Q=J.filter((L)=>L[1]).map((L)=>`${L[0]}=${L[1]}`).join("\n");if(!Q)console.warn(_`
              There are no defaults available for this env.config. So we can not
              generate an env file you. Please review the env.config.ts file and
              properly set the default values for the required environment
              variables.
            `);const z=E0.resolve(".env");if(!await S0(z,_`
              There appears to already be a .env file.
              Would you like to add the missing defaults to it?
            `,()=>{},()=>j0.writeFile(z,Q),()=>{j0.appendFileSync(z,`\n${Q}`)},!1))console.error("Did not write the .env file. Please correct the env and try again."),process.exit(1);return console.warn("Attempting to build the env again and continue with the command..."),g1(!1)}}process.exit(1)}}catch(Y){console.warn(_`
      No ${X.cyanBrightBold("env.config.ts")} file found. Environment will not be validated.
    `)}}s();import e9 from"fs-extra";import y0 from"inquirer";import $3 from"path";C();o();async function a($,Y,K){const Z=await k(),G=$.filter(R);return console.warn("WILL FORCE INSTALL:",Z[0]==="bun"?"--force":null),await F(Z[0],["i",Z[0]==="bun"?"--force":null,K?"--no-save":null,Y?`-${Y}`:null,...G].filter(R))}C();import r9 from"fuzzy";var R0=($)=>async(Y,K)=>{let Z=[];if($ instanceof Set)Z=Array.from($);else Z=$;return r9.filter(K||"",Z).map((G)=>G.string)};o();async function k0($){try{return await import($),!0}catch(Y){return console.error("Requested package is not available in this current project:",$),!1}}async function P0($,Y){const K=$||["puppeteer"];for(let Z of K)if(console.warn("Checking on dependency availability:",Z),!await k0(Z)){let J=Y;if(!J)J=(await y0.prompt([{type:"autocomplete",name:"resolution",message:`How do you want to resolve the missing package "${Z}":`,source:R0(["Install once to current project","Install in parent directory (Makes package available to all peer projects)","Do Nothing (this will end this current process as the package is required)"])}])).resolution;switch(J){case"Install to current project":await a([Z],"E");break;case"Install once to current project":a([Z],"E",!0);break;case"Install in parent directory (Makes package available to all peer projects)":{const Q=process.cwd();process.chdir("..");const z=await k();if(!e9.existsSync($3.resolve("package.json")))F(z[0],["init","-y"]);await a([Z],"E"),process.chdir(Q),await S(100);break}default:process.exit(1)}}}function x0(){return m1.debug=w.debug,m1.verbose=w.verbose,m1.pattern=w.pattern,m1}async function D4(){await g1(!0),w.parse(process.argv)}W4.registerPrompt("autocomplete",z4);var{Command:H4}=X4,w=new H4,m1={};w.version("0.0.1");w.option("-v, --verbose","Outputs more detailed information during crashes.");w.option("--debug [param]",_`
    Provides debugging contextual information various commands might use to
    aid in developing Devops.
  `);w.option("-p, --pattern [param]",_`
    Provides a pattern for certain operations to utilize. This is primarily
    used by unit tests to filter tests to specified tests.
  `);var f9=w.command("dev").description(_`
    These are the commands associated with starting up developer environments
    for various project types or portions of a project.
  `);f9.command("vite").description(_`
      Starts up a developer environment that performs incremental builds while
      developing within the lib and app folders. Uses vite and vite
      config.
    `).action(async()=>{(await Promise.resolve().then(() => (c0(),l0))).default().catch(($)=>{console.warn("dev-vite process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});f9.command("storybook").option("-i, --include <include...>","Additional storybook modules to load into storybook. These are the names of properly formatted dependencies installed into node_modules.").description(_`
      Starts a storybook instance for developing the UI components of the
      project. This makes the "ui/stories" folder in the project the expected
      development point.
    `).action(async({include:$})=>{(await Promise.resolve().then(() => (a1(),o1))).default("",$,m9.resolve(process.cwd()),x0()).catch((Y)=>{console.warn("storybook process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var L4=w.command("storybook");L4.command("run").option("-i, --include <include...>","Additional storybook modules to load into storybook. These are the names of properly formatted dependencies installed into node_modules.").description(_`
      Starts a storybook instance for developing the UI components of the
      project. This makes the "ui/stories" folder in the project the expected
      development point.
    `).action(async({include:$})=>{(await Promise.resolve().then(() => (a1(),o1))).default("",$,m9.resolve(process.cwd()),x0()).catch((Y)=>{console.warn("storybook process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});w.command("url [uri...]").description(_`
      Simple command to open a specified URL in the browser.
    `).action(async($)=>{(await Promise.resolve().then(() => (b$(),_$))).default($).catch((Y)=>{console.warn("url process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var L1=w.command("release").description(_`
    These commands are used for facilitating distribution releases of
    applications. This includes tools for building th dist folder fragments,
    viewing the expected release notes, and actually performing a complete
    release cycle.
  `);L1.command("deploy [add-remote...]").description(_`
      Performs actions necessary to update the distribution of the project.
      This will automatically update release notes, tag the release, and
      commit and push to a 'release' branch which will be ready for merging
      into master and dev.

      Specify additional remotes to deploy to via the add-remote option.
      This will deploy the release to additional remotes (AFTER all other normal
      deploy operations complete). This value is the NAME of the remote as it
      appears when you perform a "git remote -v" command.

      You can specify a specific target branch via a colon: remote:branch
      Otherwise, this will use the same main branch as configured for this
      project.
    `).action(async($)=>{a([]),(await Promise.resolve().then(() => (Q9(),J9))).default($).catch((Y)=>{console.warn("release-deploy process exited unexpectedly\n",Y.stack||Y.message),process.exit(1)})});L1.command("types").description(_`
      Updates JUST the types in the dist folder. These are the same types
      generated when building a release.
    `).action(async()=>{(await Promise.resolve().then(() => (W9(),z9))).default().catch(($)=>{console.warn("release-types process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});L1.command("view").description(_`
      This runs the release-view script. For this case, it will only display
      the release notes in the console. Actual generated release notes are a
      part of the release process.
    `).action(async()=>{(await Promise.resolve().then(() => (D0(),q0))).default("").then(async()=>{console.warn(X.cyanBrightBold("TS check passed, generating notes...")),(await Promise.resolve().then(() => (L0(),p$))).default().catch(($)=>{console.warn("release-notes process exited unexpectedly",$.stack||$.message),process.exit(1)})}).catch(($)=>{console.warn(X.redBrightBold(_`
              Failed TS check. Release notes will not be produced until all TS
              errors are resolved.
            `)),console.warn($.stack||$.message),process.exit(1)})});L1.command("build").description(_`
      This runs the release-build script. This generates all of the release
      fragments. This should ONLY be used for testing and experimenting. Actual
      release fragments should be properly created and deployed using the
      release deploy command.
    `).action(async()=>{(await Promise.resolve().then(() => (H0(),u$))).default().catch(($)=>{console.warn("release-deploy process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});var M4=L1.command("start").description(_`
      This starts up released related processes. This includes things like
      starting up the dev server without any additional builds or auto
      configuration for development.
    `);M4.command("server").description(_`
      Starts up the app server without any additional builds etc. Use the
      environments:

        BUILD_MODE: Targets an env to run the server for.
        RESOURCE_PATH: The path to the static files to serve.
    `).action(async()=>{(await Promise.resolve().then(() => (F9(),M9))).default().catch(($)=>{console.warn("release-start-server process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});w.command("start [target]").description(_`
      This fires up a server to make any static content available for being
      served.
      There are a few options for what content will be served by this script:

      - The web app
      - Devops API

      The start script will automatically pick the web app over the devops
      files, but you can specify a target if you have a devops API and a web
      app:

      - app
      - devops
    `).action(async($)=>{(await Promise.resolve().then(() => (A9(),N9))).default($,x0()).catch((Y)=>{console.warn("start process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var F4=w.command("test").description(_`
    These commands are used for running tests. This includes tools for
    running unit tests a single time or in a watch mode.

    Use the environment variables for modifying behavior:

    ${X.yellowBrightBold("PATTERN")} - This causes the tests to only run on
    files that match the pattern

    ${X.yellowBrightBold("LESS")} - This removes the verbose output list of
    all tests ran
  `);F4.command("run").description(_`
      Runs all unit tests in the unit-test folder once.
    `).action(async()=>{(await Promise.resolve().then(() => (V9(),U9))).default().catch(($)=>{console.warn("test-run process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var _4=w.command("clean").description(_`
    Common cleaning tools for various fragments within the project.
  `);_4.command("cache").description(_`
      Cleans out build and cache files to help ensure a complete rebuild takes
      place.
    `).action(async()=>{(await Promise.resolve().then(() => (E9(),j9))).default().catch(($)=>{console.warn("clean-cache process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var b4=w.command("ts").description(_`
    These commands are used for running typescript. This includes tools for
    running typescript compilation a single time or in a watch mode.
  `);b4.command("run").description(_`
      Runs typescript compilation to check for errors. Does NOT emit files, thus
      is a good mechanism for checking a build before running a release.
    `).action(async()=>{(await Promise.resolve().then(() => (D0(),q0))).default("").catch(($)=>{console.warn("ts process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var q4=w.command("pr").option("--repoUrl <value>",_`
      The https URL to the repo to make the PR into
    `).option("--repoType <value>",_`
    The repository type to make the PR into. Supported types are: git, gitlab
  `).option("--masterBranch <value>",_`
    This indicates which branch is the master/main of the repository.
  `);q4.command("release").description(_`
      This creates two PRs that merges the current remote release branch into
      the remote dev and master branches.
    `).action(async()=>{const{repoUrl:$,repoType:Y,masterBranch:K}=B4(process.argv).argv;if(!$||!Y||!K)console.warn("You must specify both --repoUrl and --repoType to use this command"),process.exit(1);await P0().catch(()=>process.exit(1)),console.warn("Dependency checks passed, continuing..."),(await Promise.resolve().then(() => (v9(),P9))).default($,Y,K).catch((Z)=>{console.warn("pr-release process exited unexpectedly"),console.warn(Z.stack||Z.message),process.exit(1)})});D4();

//# debugId=5F90DDCCC55BCBAD64756E2164756E21
//# sourceMappingURL=data:application/json;base64,
