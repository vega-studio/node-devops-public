#!/usr/bin/env bun
// @bun
import{createRequire as d9}from"node:module";var v9=Object.create;var{getPrototypeOf:m9,defineProperty:f1,getOwnPropertyNames:f9}=Object;var g9=Object.prototype.hasOwnProperty;var u9=($,Y,K)=>{K=$!=null?v9(m9($)):{};const Z=Y||!$||!$.__esModule?f1(K,"default",{value:$,enumerable:!0}):K;for(let G of f9($))if(!g9.call(Z,G))f1(Z,G,{get:()=>$[G],enumerable:!0});return Z};var F1=($,Y)=>()=>(Y||$((Y={exports:{}}).exports,Y),Y.exports);var j=($,Y)=>{for(var K in Y)f1($,K,{get:Y[K],enumerable:!0,configurable:!0,set:(Z)=>Y[K]=()=>Z})};var L=($,Y)=>()=>($&&(Y=$($=0)),Y);var P=d9(import.meta.url);var z;var A=L(()=>{z={cyan:(...$)=>`\x1B[36m${$.join(" ")}\x1B[0m`,red:(...$)=>`\x1B[31m${$.join(" ")}\x1B[0m`,yellow:(...$)=>`\x1B[33m${$.join(" ")}\x1B[0m`,green:(...$)=>`\x1B[32m${$.join(" ")}\x1B[0m`,blue:(...$)=>`\x1B[34m${$.join(" ")}\x1B[0m`,magenta:(...$)=>`\x1B[35m${$.join(" ")}\x1B[0m`,cyanBright:(...$)=>`\x1B[96m${$.join(" ")}\x1B[0m`,redBright:(...$)=>`\x1B[91m${$.join(" ")}\x1B[0m`,yellowBright:(...$)=>`\x1B[93m${$.join(" ")}\x1B[0m`,greenBright:(...$)=>`\x1B[92m${$.join(" ")}\x1B[0m`,blueBright:(...$)=>`\x1B[94m${$.join(" ")}\x1B[0m`,magentaBright:(...$)=>`\x1B[95m${$.join(" ")}\x1B[0m`,whiteBright:(...$)=>`\x1B[97m${$.join(" ")}\x1B[0m`,gray:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,grey:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,white:(...$)=>`\x1B[37m${$.join(" ")}\x1B[0m`,black:(...$)=>`\x1B[30m${$.join(" ")}\x1B[0m`,blackBright:(...$)=>`\x1B[90m${$.join(" ")}\x1B[0m`,bgCyan:(...$)=>`\x1B[46m${$.join(" ")}\x1B[0m`,bgRed:(...$)=>`\x1B[41m${$.join(" ")}\x1B[0m`,bgYellow:(...$)=>`\x1B[43m${$.join(" ")}\x1B[0m`,bgGreen:(...$)=>`\x1B[42m${$.join(" ")}\x1B[0m`,bgBlue:(...$)=>`\x1B[44m${$.join(" ")}\x1B[0m`,bgMagenta:(...$)=>`\x1B[45m${$.join(" ")}\x1B[0m`,bgCyanBright:(...$)=>`\x1B[106m${$.join(" ")}\x1B[0m`,bgRedBright:(...$)=>`\x1B[101m${$.join(" ")}\x1B[0m`,bgYellowBright:(...$)=>`\x1B[103m${$.join(" ")}\x1B[0m`,bgGreenBright:(...$)=>`\x1B[102m${$.join(" ")}\x1B[0m`,bgBlueBright:(...$)=>`\x1B[104m${$.join(" ")}\x1B[0m`,bgMagentaBright:(...$)=>`\x1B[105m${$.join(" ")}\x1B[0m`,cyanBrightBold:(...$)=>`\x1B[96m\x1B[1m${$.join(" ")}\x1B[0m`,redBrightBold:(...$)=>`\x1B[91m\x1B[1m${$.join(" ")}\x1B[0m`,yellowBrightBold:(...$)=>`\x1B[93m\x1B[1m${$.join(" ")}\x1B[0m`,greenBrightBold:(...$)=>`\x1B[92m\x1B[1m${$.join(" ")}\x1B[0m`,blueBrightBold:(...$)=>`\x1B[94m\x1B[1m${$.join(" ")}\x1B[0m`,magentaBrightBold:(...$)=>`\x1B[95m\x1B[1m${$.join(" ")}\x1B[0m`,whiteBrightBold:(...$)=>`\x1B[97m\x1B[1m${$.join(" ")}\x1B[0m`,grayBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`,greyBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`,whiteBold:(...$)=>`\x1B[37m\x1B[1m${$.join(" ")}\x1B[0m`,blackBold:(...$)=>`\x1B[30m\x1B[1m${$.join(" ")}\x1B[0m`,blackBrightBold:(...$)=>`\x1B[90m\x1B[1m${$.join(" ")}\x1B[0m`}});import{stripIndent as h9}from"common-tags";function b($,...Y){return`${h9($,...Y)}\n\n`}var n=()=>{};function V0($){return $&&$.charCodeAt!==void 0}function R($){return $!==void 0&&$!==null}import l9 from"inquirer";import{stripIndent as c9}from"common-tags";async function v($,Y,K){const{result:Z}=await l9.prompt([{type:"confirm",name:"result",message:c9`${$}`,default:Y}]);if(Z)K?.();return Z}var G1=()=>{};function u1($){return $!==void 0&&$!==null}function L1($){return u1($)&&u1($.status)&&u1($.stderr)}async function M1($,Y=[]){try{const K=Bun.spawnSync([$,...Y.filter(R)],{stdio:["inherit","inherit","inherit"],env:process.env});if(K.exitCode!==0){if(!M1.silent)console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.exitCode}`),console.error(new Error().stack);return!1}}catch(K){if(!M1.silent){if(L1(K))console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.status}`);else if(K instanceof Error)console.error(K.message);console.error(new Error().stack)}return!1}return!0}var M;var C=L(()=>{M1.silent=!1;M=M1});async function k(){if(J1)return J1;if(await M("bun",["--version"]))J1=["bun","bunx"];else J1=["npm","npx"];return J1}var J1=null;var s=L(()=>{C()});async function E($){await new Promise((Y)=>setTimeout(Y,$))}import r9 from"fs-extra";import h from"path";async function a(){console.warn("Building Vite config using base:",z.yellowBrightBold(h.resolve("vite.config.ts")));let $=await(await import(h.resolve("vite.config.ts"))).default();const Y=await r9.readJSONSync(h.resolve("tsconfig.json"));return $={...$,logLevel:"info",mode:"development",root:h.resolve("app/client"),clearScreen:!0,build:{...$.build,cssCodeSplit:!0,outDir:h.resolve("build/client"),sourcemap:!0,rollupOptions:{output:{manualChunks:void 0}},watch:{...$.build?.watch,include:[...(Array.isArray($.build?.watch?.include)?$.build?.watch?.include:[$.build?.watch?.include])||[],...Y?.include?.map((K)=>h.resolve(K))||[],"tsconfig.json"].filter(Boolean)},emptyOutDir:!0},resolve:{alias:{config:h.resolve("app/config")}}},$}var b1=L(()=>{A()});import e9 from"deepmerge";import $3 from"fs-extra";import Y3 from"path";async function u(){const $=$3.readJSONSync(Y3.resolve("package.json"));return e9($.dependencies||{},$.peerDependencies||{})}var _1=()=>{};import k0 from"fs-extra";import P0 from"path";async function w(){return k0.readJSONSync(P0.resolve("package.json")).version||""}var m=()=>{};import*as y0 from"vite";import K3 from"fs-extra";import d1 from"path";async function Q1(){if(process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await w(),console.warn(z.yellowBrightBold("Starting Vite client build...")),!K3.existsSync(d1.resolve("app/client/index.ts"))){console.warn("Tried to start development process for the app client, but no entry file was found.");return}const $=await a();$.root=d1.resolve("app/client"),$.build.outDir=d1.resolve("build/client"),$.build.rollupOptions.external=Object.keys(await u()),await y0.build($),console.warn(z.yellowBrightBold("Vite client build process started..."))}var h1=L(()=>{b1();A();_1();m()});function v0($){const Y=(K)=>(Z)=>{if($(K,Z),Z)process.exit(1);else process.exit(0)};process.on("exit",Y("exit")),process.on("SIGINT",Y("SIGINT")),process.on("SIGUSR1",Y("SIGUSR1")),process.on("SIGUSR2",Y("SIGUSR2")),process.on("SIGTERM",Y("SIGTERM")),process.on("uncaughtException",Y("uncaughtException"))}function Z3(){if(m0!==null)return;m0=setInterval(()=>{while(l1.length>0){const $=l1.shift();if($)console.log(...$)}},400)}function c1(...$){l1.push($),Z3()}var l1,m0=null;var f0=L(()=>{l1=[]});import G3 from"child_process";import p1 from"path";import J3 from"readline";async function z1($){console.warn("\nRunning the App server at: ",z.yellowBrightBold(p1.resolve("app/server")),"\n"),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await w(),process.env.RESOURCE_PATH=process.env.RESOURCE_PATH||p1.resolve("build/client");const Y=await k();if(Y[0]!=="bun")console.error("Currently only an environment with bun installed is supported for this command.");const K=G3.spawn(Y[0],["--watch",p1.resolve("app/server/index.ts")]);process.stdin.setRawMode?.(!0),process.stdin.resume(),process.stdin.setEncoding("utf8"),J3.emitKeypressEvents(process.stdin);let Z=!1;if(process.stdin.on("keypress",async(G,J)=>{if(J&&J.ctrl&&J.name==="c")K.kill(),process.exit(0);else if(J&&J.ctrl&&J.name==="d")K.kill(),process.exit(0);else if(G.toString()==="b"||G.toString()==="B"){if(Z)return;Z=!0,await Q1(),Z=!1}else if(G.toString()==="q"||G.toString()==="Q")if(K.kill(),J.shift)process.exit(123);else process.exit(0)}),process.stdin.pipe(K.stdin),$)$(K);else K.stdout.on("data",function(G){c1(`${G.toString().slice(0,-1)}`)}),K.stderr.on("data",function(G){c1(`${G.toString().slice(0,-1)}`)});v0(async(G,J)=>{if(K.kill(),console.warn("EXIT BUILD SERVER"),console.warn(z.redBrightBold(G)),J&&J instanceof Error)console.warn(z.redBrightBold(J.stack||J.message));process.exit(0)})}var i1=L(()=>{h1();A();s();f0();m()});var u0={};j(u0,{default:()=>g0});async function g0(){process.env.NODE_ENV="development",Q1(),console.warn(z.yellowBrightBold("Starting dev server...")),process.env.VITE_RELEASE_VERSION=await w(),await z1()}var d0=L(()=>{h1();i1();A();m()});import t from"path";import Q3 from"url";async function h0(){if(t.basename(t.resolve(n1,".."))==="dist")return t.resolve(n1,"../../");return t.resolve(n1,"../../../")}var n1;var l0=L(()=>{n1=Q3.fileURLToPath(new URL(".",import.meta.url))});async function l($,Y=[]){const K=await k();return M(K[0],["run",$,Y.length>0&&Y[0]!=="--"?"--":void 0,...Y])}var q1=L(()=>{C();s()});var o1={};j(o1,{default:()=>c0});import s1 from"path";async function c0($,Y,...K){const Z=s1.resolve(".");process.env.PROJECT_ROOT=Z,process.env.VITE_RELEASE_VERSION=await w();const G=s1.resolve(".storybook"),J=await h0();if(process.chdir(J),Y&&Y.length>0)process.env.NODE_MODULES_STORIES=Y.join(",");if($==="build"){if(!l("storybook",["build","-c",G,"-o",`"${s1.resolve(Z,"storybook-static")}"`]))console.error(z.redBrightBold("Failed to build storybook"))}else if(!l("storybook",["dev","--no-version-updates","-p",process.env.PORT||"6006","-c",`"${G}"`]))console.error(z.redBrightBold("Failed to run storybook"))}var a1=L(()=>{A();l0();q1();m()});var r1=F1((G5,i0)=>{function z3(){try{return p0.statSync("/.dockerenv"),!0}catch($){return!1}}function X3(){try{return p0.readFileSync("/proc/self/cgroup","utf8").includes("docker")}catch($){return!1}}var p0=import.meta.require("fs"),t1;i0.exports=()=>{if(t1===void 0)t1=z3()||X3();return t1}});var o0=F1((J5,e1)=>{var W3=import.meta.require("os"),B3=import.meta.require("fs"),n0=r1(),s0=()=>{if(process.platform!=="linux")return!1;if(W3.release().toLowerCase().includes("microsoft")){if(n0())return!1;return!0}try{return B3.readFileSync("/proc/version","utf8").toLowerCase().includes("microsoft")?!n0():!1}catch($){return!1}};if(process.env.__IS_WSL_TEST__)e1.exports=s0;else e1.exports=s0()});var t0=F1((Q5,a0)=>{a0.exports=($,Y,K)=>{const Z=(G)=>Object.defineProperty($,Y,{value:G,enumerable:!0,writable:!0});return Object.defineProperty($,Y,{configurable:!0,enumerable:!0,get(){const G=K();return Z(G),G},set(G){Z(G)}}),$}});var G$=F1((z5,Z$)=>{function b3(){if($0===void 0)$0=M3()||L3();return $0}function Y$($){if(typeof $==="string"||Array.isArray($))return $;const{[e0]:Y}=$;if(!Y)throw new Error(`${e0} is not supported`);return Y}function Z0({[r]:$},{wsl:Y}){if(Y&&D1)return Y$(Y);if(!$)throw new Error(`${r} is not supported`);return Y$($)}var __dirname="/Users/diniden/Desktop/VoidRay/dev-ops/node-devops/node_modules/open",H3=import.meta.require("path"),F3=import.meta.require("child_process"),{promises:N1,constants:K$}=import.meta.require("fs"),D1=o0(),L3=r1(),Y0=t0(),r0=H3.join(__dirname,"xdg-open"),{platform:r,arch:e0}=process,M3=()=>{try{return N1.statSync("/run/.containerenv"),!0}catch{return!1}},$0,_3=(()=>{let Y;return async function(){if(Y)return Y;const K="/etc/wsl.conf";let Z=!1;try{await N1.access(K,K$.F_OK),Z=!0}catch{}if(!Z)return"/mnt/";const G=await N1.readFile(K,{encoding:"utf8"}),J=/(?<!#.*)root\s*=\s*(?<mountPoint>.*)/g.exec(G);if(!J)return"/mnt/";return Y=J.groups.mountPoint.trim(),Y=Y.endsWith("/")?Y:`${Y}/`,Y}})(),$$=async($,Y)=>{let K;for(let Z of $)try{return await Y(Z)}catch(G){K=G}throw K},O1=async($)=>{if($={wait:!1,background:!1,newInstance:!1,allowNonzeroExitCode:!1,...$},Array.isArray($.app))return $$($.app,(X)=>O1({...$,app:X}));let{name:Y,arguments:K=[]}=$.app||{};if(K=[...K],Array.isArray(Y))return $$(Y,(X)=>O1({...$,app:{name:X,arguments:K}}));let Z;const G=[],J={};if(r==="darwin"){if(Z="open",$.wait)G.push("--wait-apps");if($.background)G.push("--background");if($.newInstance)G.push("--new");if(Y)G.push("-a",Y)}else if(r==="win32"||D1&&!b3()&&!Y){const X=await _3();if(Z=D1?`${X}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe`:`${process.env.SYSTEMROOT}\\System32\\WindowsPowerShell\\v1.0\\powershell`,G.push("-NoProfile","-NonInteractive","\u2013ExecutionPolicy","Bypass","-EncodedCommand"),!D1)J.windowsVerbatimArguments=!0;const W=["Start"];if($.wait)W.push("-Wait");if(Y){if(W.push(`"\`"${Y}\`""`,"-ArgumentList"),$.target)K.unshift($.target)}else if($.target)W.push(`"${$.target}"`);if(K.length>0)K=K.map((F)=>`"\`"${F}\`""`),W.push(K.join(","));$.target=Buffer.from(W.join(" "),"utf16le").toString("base64")}else{if(Y)Z=Y;else{const X=!__dirname||__dirname==="/";let W=!1;try{await N1.access(r0,K$.X_OK),W=!0}catch{}Z=process.versions.electron||r==="android"||X||!W?"xdg-open":r0}if(K.length>0)G.push(...K);if(!$.wait)J.stdio="ignore",J.detached=!0}if($.target)G.push($.target);if(r==="darwin"&&K.length>0)G.push("--args",...K);const Q=F3.spawn(Z,G,J);if($.wait)return new Promise((X,W)=>{Q.once("error",W),Q.once("close",(F)=>{if(!$.allowNonzeroExitCode&&F>0){W(new Error(`Exited with code ${F}`));return}X(Q)})});return Q.unref(),Q},K0=($,Y)=>{if(typeof $!=="string")throw new TypeError("Expected a `target`");return O1({...Y,target:$})},q3=($,Y)=>{if(typeof $!=="string")throw new TypeError("Expected a `name`");const{arguments:K=[]}=Y||{};if(K!==void 0&&K!==null&&!Array.isArray(K))throw new TypeError("Expected `appArguments` as Array type");return O1({...Y,app:{name:$,arguments:K}})},A1={};Y0(A1,"chrome",()=>Z0({darwin:"google chrome",win32:"chrome",linux:["google-chrome","google-chrome-stable","chromium"]},{wsl:{ia32:"/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe",x64:["/mnt/c/Program Files/Google/Chrome/Application/chrome.exe","/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe"]}}));Y0(A1,"firefox",()=>Z0({darwin:"firefox",win32:"C:\\Program Files\\Mozilla Firefox\\firefox.exe",linux:"firefox"},{wsl:"/mnt/c/Program Files/Mozilla Firefox/firefox.exe"}));Y0(A1,"edge",()=>Z0({darwin:"microsoft edge",win32:"msedge",linux:["microsoft-edge","microsoft-edge-dev"]},{wsl:"/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"}));K0.apps=A1;K0.openApp=q3;Z$.exports=K0});async function O($,Y=[]){try{const K=Bun.spawnSync([$,...Y.filter(R)],{stdio:["inherit","pipe","pipe"],env:process.env});if(K.exitCode!==0)return console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.exitCode}`),console.error(new Error().stack),null;return(K.stdout||"").toString()}catch(K){if(L1(K))console.error(`Error: ${$} ${Y.join(" ")} failed with code: ${K.status}`);else if(K instanceof Error)console.error(K.message);return console.error(new Error().stack),null}}var c=()=>{};function J$({template:$,options:Y,required:K,doubleCurlyBrackets:Z,onError:G,onToken:J}){const Q=new Map,X=new Map,W=new Map,F=new Map;let B=/\$\{([^\}]*)\}/g;if(Z)B=/\$\{\{([^\}]*)\}\}/g;const D=$.replace(B,(q,H)=>{let I="";if(F.set(H,(F.get(H)||0)+1),H in Y){Q.set(H,(Q.get(H)||0)+1);const O0=Y[H];if(O0!==void 0)I=O0}else X.set(H,(X.get(H)||0)+1);if(J){if(I=J(H,I),I!==H)Q.set(H,(Q.get(H)||0)+1),X.delete(H)}return I});Object.keys(Y).forEach((q)=>{if(!Q.get(q))W.set(q,(W.get(q)||0)+1)});const N={resolvedtemplateOptions:Q,template:D,templateProvidedOptions:F,unresolvedProvidedOptions:W,unresolvedTemplateOptions:X};if(K)K.values.forEach((q)=>{if(N.unresolvedProvidedOptions.get(q)){const H=`${K.name}: Could not resolve all the required inputs. Input: ${q}`;if(G)G(H);else console.error(H)}else if(N.unresolvedTemplateOptions.get(q)){const H=`${K.name}: A required option was not provided in the options parameter. Option: ${q}`;if(G)G(H);else console.error(H)}else if(!N.resolvedtemplateOptions.get(q)){const H=`${K.name}: A required option was not provided in the options parameter. Option: ${q}`;if(G)G(H);else console.error(H)}});return N}var F$={};j(F$,{default:()=>H$});import X1 from"fs-extra";import Q$ from"hostile";import G0 from"path";import z$ from"valid-url";function D3($){return $&&typeof $==="function"}function X$($,Y,...K){return new Promise((Z,G)=>{const J=$[Y];if(!D3(J)){G(new Error(`${String(Y)} is not a function`));return}J(...K,(Q,X)=>{if(Q)console.warn(Q),G(Q),process.exit(1);else Z(X||void 0)})})}async function N3(){const Y=X1.readJSONSync(G0.resolve("package.json")).hosts;if(!Y)return;const K=Object.keys(Y);let Z=await X$(Q$,"get",!1);const G=[];console.warn(z.yellow("Updating hosts file..."));for(let Q of K)try{if(!Z.find((X)=>X[0]===Q&&X[1]===Y[Q]))G.push([Q,Y[Q]])}catch(X){if(X instanceof Error)console.warn(z.red(X.message))}if(G.length>0){console.warn(z.yellow("Adding hosts (You may be prompted for administrator password):\n\t",G.map((X)=>`${X[0]} => ${X[1]}`).join("\n\t"))),await M("sudo",["echo","Granted sudo access to update hosts file."]);const Q=await O("stat",["-f","%p","/etc/hosts"]).toString();await M("sudo",["chmod","666","/etc/hosts"]);for(let X of G)X1.appendFileSync("/etc/hosts",`${X[0]} ${X[1]}`);X1.appendFileSync("/etc/hosts","\n"),await M("sudo",["chmod",Q.substring(Q.length-4).trim(),"/etc/hosts"])}await E(500),console.warn(z.yellow("Verifying hosts file...")),Z=await X$(Q$,"get",!1);let J=!1;if(G.forEach(([Q,X])=>{if(!Z.find((W)=>W[0]===Q&&W[1]===Y[Q]))J=!0,console.warn(z.redBright(`Failed to add host: ${z.yellowBright(Q)} => ${z.yellowBright(X)}`))}),J)console.warn(z.red(b`
        *************************************************************************
        * Some hosts specified in the package.json were not able to be written  *
        * to the hosts file for the system. You can amend this by editing the   *
        * file yourself, or by trying to run this script again as an admin.     *
        *************************************************************************
      `))}function W$($,Y,K){let Z=Y;if(z$.isWebUri(Y))Z=Y;else if($[Y])Z=$[Y];const G=J$({options:K,template:Z});if(G.unresolvedTemplateOptions.size>0)throw console.warn(z.red(b`
          You must specify these env variables for this URL to work:
          ${Array.from(G.unresolvedTemplateOptions.keys()).join("\n\t")}
        `)),new Error("Missing env configuration for URL");if(Z=G.template,z$.isWebUri(Z))console.warn("Navigating to:",z.cyanBrightBold(Z)),B$.default(Z);else console.warn("Can not open invalid URL:",z.redBrightBold(Z))}async function H$($,Y){const Z=X1.readJSONSync(G0.resolve("package.json"))?.url||{},G=Y?.reduce((Q,X,W)=>{return Q[`${W+1}`]=X,Q},{})||{};if(!$||$.length<=0){console.warn(b`
      Available URLs:
        ${z.cyanBrightBold(Object.keys(Z).join("\n        "))}
    `);return}await N3();const J={...process.env,...G};if(Array.isArray($))$.forEach((Q)=>{W$(Z,Q,J)});else W$(Z,$,J)}var B$;var L$=L(()=>{B$=u9(G$(),1);A();n();C();c()});import M$ from"child_process";async function e(){try{if(M$.execSync("git status --porcelain=v1 2>/dev/null",{encoding:"utf-8"}).trim().split("\n").filter(Boolean).length===0)return!1}catch($){return!0}return!0}var x1=()=>{};async function I1($){if($){if(!await v(`
      Would you like to return back to development?
      Runs the following:
        git fetch
        git checkout dev
        git reset --hard origin/dev
    `))return}if(await e())return console.error("Can not return to dev branch as changes are present on the current branch."),!1;let Y=!1;if(!await M("git",["fetch"]))Y=!0;if(!await M("git",["checkout","dev"]))Y=!0;if(!await M("git",["reset","--hard","origin/dev"]))Y=!0;if(Y)return console.error("Could not return to dev branch."),!1;return!0}var J0=L(()=>{C();x1();G1()});import x from"fs-extra";import O3 from"ignore";import _ from"path";async function A3(){const $=await u();console.warn("Building full distribution...");let Y=await Bun.build({entrypoints:[_.resolve("./bin/main.ts")],target:"bun",external:Object.keys($),minify:!0,sourcemap:"inline"});for(let K of Y.outputs)console.warn("Writing bin bundle resource:",z.cyanBrightBold(K.path)),await Bun.write(_.resolve("./dist/bin",K.path),K);console.warn("Building gimped distribution..."),Y=await Bun.build({entrypoints:[_.resolve("./bin/main-gimp.ts")],target:"node",external:Object.keys($),minify:!0,sourcemap:"inline"});for(let K of Y.outputs)console.warn("Writing bin bundle resource:",z.cyanBrightBold(K.path)),await Bun.write(_.resolve("./dist/bin",K.path),K);console.warn("Copying entry cross-platform distribution..."),x.copyFileSync(_.resolve("./bin/main-entry.cjs"),_.resolve("./dist/bin/main-entry.cjs"))}async function x3(){if(!x.existsSync(_.resolve("./bin/shim")))console.error("No shim distribution files found to be built");if(x.existsSync(_.resolve("./shim")))x.removeSync(_.resolve("./shim"));const $=await u();console.warn("Building shim distribution...");const Y=await Bun.build({entrypoints:[_.resolve("./bin/shim/index.ts")],target:"node",external:Object.keys($),minify:!0});for(let Z of Y.outputs)console.warn("Writing shim bundle resource:",z.cyanBrightBold(Z.path)),await Bun.write(_.resolve("./shim/src/bin/shim",Z.path),Z);x.writeFileSync(_.resolve("./shim/index.js"),'export * from "./src/bin/shim/index.js";\n',{encoding:"utf-8"}),x.writeFileSync(_.resolve("./shim/index.d.ts"),'export * from "./src/bin/shim/index.d.ts";\n',{encoding:"utf-8"});const K=x.readJSONSync(_.resolve("tsconfig.json"));if(K.exclude=K.exclude||[],K.exclude.push("./bin/lib/**"),K.include=["./bin/shim"],x.writeJSONSync(_.resolve("tsconfig.temp.json"),K),await E(500),!M("tsc",["-d","--emitDeclarationOnly","--pretty","--outDir",_.resolve("./shim/src/bin"),"--project",_.resolve("tsconfig.temp.json")]))console.warn("Failed to compile type declarations for the shim files."),x.removeSync(_.resolve("tsconfig.temp.json")),process.exit(1);x.removeSync(_.resolve("tsconfig.temp.json"))}async function I3(){console.warn(z.yellowBright("Copying template files for bin distribution"));const $=_.resolve(__dirname,"../../template"),Y=_.resolve("./dist/bin/template");x.copySync($,Y);const K=x.readdirSync(Y).map((J)=>_.resolve(Y,J,"index.ts")).filter((J)=>{if(x.existsSync(J))return!0}),Z=await u();let G=!1;for(let J of K){const Q=await Bun.build({entrypoints:[J],target:"bun",external:Object.keys(Z),minify:!0});if(!Q.success){console.error(z.redBrightBold("Build failed for template:"),z.cyanBrightBold(_.relative(Y,_.dirname(J))));for(let X of Q.logs)console.error(X);G=!0}for(let X of Q.outputs)console.warn("Writing template entry file:",z.cyanBrightBold(_.relative(Y,_.resolve(_.dirname(J),X.path)))),await Bun.write(_.resolve(_.dirname(J),X.path),X)}if(G)console.error(z.redBrightBold("Some templates have errors (see above), stopping the build process.")),process.exit(1)}async function U3(){console.warn(z.yellowBright("Copying entry shell script for bin distribution")),x.copySync(_.resolve("./bin/main-entry.sh"),_.resolve("./dist/bin/main-entry.sh")),x.copySync(_.resolve("./bin/main-entry.ps1"),_.resolve("./dist/bin/main-entry.ps1"))}async function _$(){if(console.warn(z.cyanBright("Building bin commands for the distribution.")),!x.existsSync(_.resolve("./bin/main.ts"))||!x.existsSync(_.resolve("./bin/main-entry.sh"))||Q0.ignores("bin")){console.warn(`Tried to make a release for the bin commands, but no bin/main.ts or bin/main.sh entry file was found. (or was gitignored):\n\t${_.resolve("./bin/main.ts")}\n\t${_.resolve("./bin/main.sh")}`);return}x.ensureDirSync(_.resolve("./dist")),x.ensureDirSync(_.resolve("./dist/bin/template")),await A3(),await x3(),await I3(),await U3()}var __dirname="/Users/diniden/Desktop/VoidRay/dev-ops/node-devops/bin/lib/build/bin",b$,Q0;var q$=L(()=>{A();C();_1();b$=_.resolve(".gitignore"),Q0=O3.default();if(x.existsSync(b$))Q0=Q0.add(x.readFileSync(b$).toString())});import D$ from"fs";import N$ from"path";function O$($){return{name:"vite-devops-string-replace-plugin",enforce:"pre",load(Y){const K=N$.resolve(Y),Z=[".ts",".js",".tsx",".jsx"];if(D$.existsSync(K)&&Z.includes(N$.extname(K))&&!K.includes("node_modules")&&!K.includes("\0")){let G=D$.readFileSync(K,{encoding:"utf-8"});return $.forEach((J)=>{G=G.replace(J.from,J.to)}),G}}}}var A$=()=>{};import U from"fs-extra";import V from"path";function x$($){const Y=process.env.PROJECT_ROOT||".",K=V.resolve(Y,"app/config");if(!U.existsSync(K)){console.warn(`viteDevopsAppConfigPlugin: ${z.cyanBrightBold("No app/config folder found.")}`);return}try{const Z=U.readdirSync(K).filter((B)=>{return U.statSync(V.join(K,B)).isDirectory()}),G=Z.map((B)=>V.join(K,B)),Q=Z.map((B,D)=>{if(!$)if(U.existsSync(V.join(G[D],`${B}.local`))||U.existsSync(V.join(G[D],`${B}.local.js`))||U.existsSync(V.join(G[D],`${B}.local.ts`))||U.existsSync(V.join(G[D],`${B}.local.tsx`))||U.existsSync(V.join(G[D],`${B}.local.jsx`)))return[{from:`"config/${B}/${B}"`,to:`"config/${B}/${B}.local"`},{from:`"config/${B}/${B}.js"`,to:`"config/${B}/${B}.local.js"`},{from:`"config/${B}/${B}.ts"`,to:`"config/${B}/${B}.local.ts"`}];else return[];return[{from:`"config/${B}/${B}"`,to:`"config/${B}/${B}.${$}"`},{from:`"config/${B}/${B}.js"`,to:`"config/${B}/${B}.${$}.js"`},{from:`"config/${B}/${B}.ts"`,to:`"config/${B}/${B}.${$}.ts"`}]}).reduce((B,D)=>B.concat(D),[]),F=[...!$&&(U.existsSync(V.join(K,"env.local"))||U.existsSync(V.join(K,"env.local.js"))||U.existsSync(V.join(K,"env.local.ts"))||U.existsSync(V.join(K,"env.local.tsx"))||U.existsSync(V.join(K,"env.local.jsx")))?[{from:'"config/env"',to:'"config/env.local"'},{from:'"config/env.js"',to:'"config/env.local.js"'},{from:'"config/env.ts"',to:'"config/env.local.ts"'}]:$?[{from:'"config/env"',to:`"config/env.${$}"`},{from:'"config/env.js"',to:`"config/env.${$}.js"`},{from:'"config/env.ts"',to:`"config/env.${$}.ts"`}]:[],...Q];if(F.length>0)console.warn(`

  ${z.yellowBrightBold("Using the following mappings for app config:")}

  \t${z.cyanBrightBold(F.map((B)=>`\n  ${B.from} => ${B.to}`).join("\n\t"))}

      `);return O$(F)}catch(Z){console.error(Z),console.error(z.redBrightBold(`
      App config plugin failed to load. The default config paths will be used
      and any specific environment requested will be ignored.
    `))}}var I$=L(()=>{A();A$()});import*as V$ from"vite";import U1 from"fs-extra";import V3 from"ignore";import $1 from"path";async function w$($){if(console.warn(z.cyanBright("Building client files for the distribution.")),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await w(),process.env.FORCE_BUILD!=="true"){if(!U1.existsSync($1.resolve("app/client"))||z0.ignores("app/client")){console.error(`Tried to make a release for the web app client, but no app/client entry file was found. (or was gitignored):\n\t${$1.resolve("app/client")}`);return}}const Y="development";process.env.NODE_ENV="production",console.warn(`Releasing ${z.yellowBrightBold("app/client")} for Environment:`,z.cyanBrightBold($)),process.env.BUILD_ENV=$;const K=await a();if(K.plugins=[x$($),...K.plugins||[]],K.logLevel="warn",K.mode="production",K.root=$1.resolve("app/client"),K.build.outDir=$1.resolve("dist/app/client",$),K.build.watch=void 0,K.build.rollupOptions.output={dir:K.build.outDir,entryFileNames:"index.js",chunkFileNames:"index.js",manualChunks:void 0},await V$.build(K),process.env.NODE_ENV=Y,!U1.existsSync($1.resolve(`dist/app/client/${$}/index.js`)))console.error("\n\nFailed to create Client output bundle. Exiting process...\n\n"),process.exit(1)}var U$,z0;var T$=L(()=>{b1();A();m();I$();U$=$1.resolve(".gitignore"),z0=V3.default();if(U1.existsSync(U$))z0=z0.add(U1.readFileSync(U$).toString())});async function Y1($=[],Y){const K=await k();if(Y1.optimize){if(K[1]==="bunx")return M(K[1],[Y?.excludeBunFlag?null:"--bun",...$].filter(R))}return M(K[1],[...$])}var X0=L(()=>{C();s();Y1.optimize=!0});import V1 from"fs-extra";import W1 from"path";async function w1(){if(!V1.existsSync(W1.resolve("ui")))return;V1.ensureDir(W1.resolve("dist/types")),console.warn(z.yellowBrightBold("Generating .d.ts files...")),Y1(["tsc","--emitDeclarationOnly","--declaration","--outDir","dist/types","--project",W1.resolve("tsconfig.json")]);const $=V1.readdirSync(W1.resolve("dist/types"));for(let Y of $){if(Y==="ui"||Y==="util")continue;console.warn(z.yellowBright(`Removing types for folder: ${Y}`)),V1.removeSync(W1.resolve("dist/types",Y))}}var W0=L(()=>{A();X0()});import C$ from"fs-extra";import S$ from"path";async function j$(){return C$.readJSONSync(S$.resolve("package.json")).name||""}var E$=()=>{};import*as k$ from"vite";import T1 from"fs";import w3 from"ignore";import d from"path";async function P$(){if(console.warn(z.cyanBright("Copying ui files for the distribution.")),process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await w(),!process.env.FORCE_BUILD){if(!T1.existsSync(d.resolve("ui"))||B0.ignores("ui")){console.error(`"No library project found (or was gitignored) for bundling release at:\n\t${d.resolve("ui")}`);return}}if(console.warn(z.yellowBrightBold("Starting Vite client build...")),!T1.existsSync(d.resolve("ui/index.ts"))){console.error("The UI folder project has no index.ts entry point to create the library.");return}await w1(),console.warn(z.yellowBrightBold("Building library bundle..."));const $=await a();$.logLevel="warn",$.root=d.resolve("ui"),$.build.lib={entry:d.resolve("ui/index.ts"),name:(await j$()).split("@").join("").split("/").join("_"),fileName:"index"},$.mode="production",$.root=d.resolve("app/client"),$.build.outDir=d.resolve("dist/ui"),$.build.watch=void 0,$.build.rollupOptions.output={dir:$.build.outDir,entryFileNames:"index.js",chunkFileNames:"index.js",manualChunks:void 0};const Y=Object.keys(await u());console.warn("Externalized Libraries that will not be included in the bundle:",Y),$.build.rollupOptions={...$.build.rollupOptions,external:Y},await k$.build($)}var R$,B0;var y$=L(()=>{b1();A();W0();_1();E$();m();R$=d.resolve(".gitignore"),B0=w3.default();if(T1.existsSync(R$))B0=B0.add(T1.readFileSync(R$).toString())});import p from"fs-extra";import f from"path";async function v$(){process.env.VITE_RELEASE_VERSION=process.env.VITE_RELEASE_VERSION||await w(),console.warn(z.cyanBright("Copying story files for the distribution."));const $=f.resolve("dist/stories"),Y=f.resolve("ui/stories"),K=f.resolve("dist");if(!p.existsSync(Y)){console.error(`Could not find stories directory:\n\t${Y}`);return}p.ensureDirSync($),p.copySync(Y,$);const Z=f.resolve("package.json"),J={name:p.readJSONSync(Z).name||"unknown",private:!0,type:"module",main:"./ui/index.js",types:"./types/ui/index.d.ts",dependencies:{},repository:{},scripts:{},devDependencies:{}};console.warn("Writing distribution package.json:",f.resolve(K,"package.json")),p.writeJSONSync(f.resolve(K,"package.json"),J),await E(500),p.ensureDirSync(f.resolve(K,"components")),J.main="../ui/index.js",J.types="../types/ui/index.d.ts",console.warn("Writing distribution package.json:",f.resolve(K,"components/package.json")),p.writeJSONSync(f.resolve(K,"components/package.json"),J),await E(500),console.warn("Finished copying stories.")}var m$=L(()=>{A();m()});var f$={};j(f$,{default:()=>S1});import C1 from"fs-extra";import K1 from"path";async function T3(){if(process.env.QUICK_BUILD==="true")return;if(await l("release",["view"]),!await v("\nShould the release continue being made?"))await I1(!0),process.exit(1)}async function C3(){console.warn("Gathering build targets from:",z.yellowBright(K1.resolve("build.conf.js")));const $=(await import(K1.resolve("build.conf.js"))).BUILD_TARGETS;if(process.env.NODE_ENV="production",console.warn("Building environments",z.redBrightBold(JSON.stringify($))),!Array.isArray($))console.error("build.conf.js must be an array of string values"),process.exit(1);for(let Y of $)await w$(Y);await P$(),await v$(),await _$()}async function S3(){try{C1.removeSync(K1.resolve("dist"))}catch($){console.warn("No dist folder to clean out.")}C1.ensureDirSync(K1.resolve("dist"))}async function j3(){try{C1.removeSync(K1.resolve("dist/test"))}catch($){console.warn("No test folder to clean out")}try{C1.removeSync(K1.resolve("dist/unit-test"))}catch($){console.warn("No unit-test folder to clean out")}}async function S1(){console.warn("Validating the release..."),await T3(),console.warn("Clear previous build..."),await S3(),console.warn("Bundling project..."),await C3(),console.warn("Final cleanup..."),await j3(),console.warn("Release Build complete!")}var H0=L(()=>{A();q1();J0();G1();q$();T$();y$();m$()});var l$={};j(l$,{default:()=>E1});import d$ from"fs-extra";import E3 from"lodash/groupBy.js";import j1 from"path";import R3 from"lodash/uniq.js";import k3 from"lodash/upperFirst.js";import{compare as P3,inc as y3}from"semver";function g3($){const Y=$.toLowerCase().split("\n").map((K)=>(K.match(/## (\w+)/)||[])[1]).filter(Boolean);if(Y.includes("breaking"))return"major";if(Y.includes("added"))return"minor";return"patch"}async function u3($){console.warn("Building release notes..."),console.warn("fetching tags...");const Y=await O("git",["tag","--list"]);if(Y===null)console.error("Could not get git tags"),process.exit(1);const K=Y.trim().split("\n").sort(P3),Z=K[(K.includes($)?K.indexOf($):K.length)-1];console.warn("fetching version hash...");const G=await O("git",["rev-list","-1",`${$}`]);if(G===null)console.error("Couldn't get current version hash"),process.exit(1);const J=G.trim();console.warn("fetching previous version hash...");let Q=await O("git",["rev-list","-1",`${Z}`]);if(Q===null){if(Q=await O("git",["rev-list","--max-parents=0","HEAD"]),Q===null)console.error("Couldn't get previous version hash"),process.exit(1)}const X=Q.trim();console.warn("fetching logs...");const W=await O("git",["log","--pretty=%B",`${X}...${J}`]);if(W===null)console.error("Couldn't get logs"),process.exit(1);const F=W.split("\n").map((N)=>{const[,q="",H=""]=N.match(/^\s*(\w+?)\s*:\s*(.*)\s*$/)||[];return{tag:h$[q.toLowerCase()],message:k3(H)}}).filter((N)=>N.tag),B=E3(F,"tag"),D=f3.filter((N)=>B[N]).map((N)=>{const q=B[N];return`## ${N.replace(/(\w)/,(H)=>H.toUpperCase())}\n\n${q.map(({tag:H,message:I})=>`- [\`${H.toUpperCase()}\`]: ${I}`).join("\n")}`}).join("\n\n");return console.warn("New release notes completed"),D}async function E1($={}){if(console.warn("Generating Release Notes..."),await O("git",["fetch","--tags"])===null)console.error("Couldn't fetch tags"),process.exit(1);const K=g$(j1.resolve("package.json")),{version:Z="0.0.1"}=K;console.warn("Current Project version:",{currentVersion:Z});const G=await u3("HEAD"),J=g3(G),Q=J&&y3(Z,J);if(!Q)console.error("Unable to determine next version",{currentVersion:Z}),process.exit(1);if($.tag){if(console.warn("Creating the new tag..."),await O("git",["tag","-a",Q,"-m",`Release ${Q}`])===null)console.error("Couldn't create tag"),process.exit(1)}if($.updatePackage){console.warn("Updating the package.json...");const W=g$(j1.resolve("package.json"));W.version=Q,u$(j1.resolve("package.json"),`${JSON.stringify(W,null,"  ")}\n`)}const X=`## ${Q}\n\n${G}`;if(!G.trim()&&$.errorOnEmpty)throw new Error("No notes were generated as no semver style messages were found");if($.file){console.warn("Writing the release notes to file:",$.file);const W=j1.resolve($.file),F=v3(W)?m3(W):"";u$(W,`${`${X}\n\n${F}`.trim()}\n`);for(let D=0;D<=100;++D){if(d$.existsSync(W))break;if(D===100)console.warn("Release notes file was not created in time for the final release commit:",z.redBrightBold(W)),process.exit(1)}if(console.warn("Adding fragments to git..."),await O("git",["add","-A"])===null)console.warn("Could not ensure all fragments are added for the next commit."),process.exit(1);if(console.warn("Committing to git..."),await O("git",["commit","-am",`Release ${Q}`])===null)console.error("Couldn't commit changes"),process.exit(1);console.warn(`\n\n${z.cyan(X)}\n\n`)}else console.warn(`\n\n${z.cyan(X)}\n\n`);process.env.VITE_RELEASE_VERSION=Q}var v3,m3,g$,u$,h$,f3;var F0=L(()=>{A();c();({existsSync:v3,readFileSync:m3,readJSONSync:g$,writeFileSync:u$}=d$),h$={breaking:"breaking",feat:"added",feature:"added",added:"added",fix:"fixed",fixed:"fixed",hotfix:"fixed",task:"task"},f3=R3(Object.values(h$))});async function R1($){return M("git",["ls-remote",$])}var L0=L(()=>{C()});async function c$($){const Y=await O("git",["remote","-v"]);if(Y===null)console.warn("Could not list remotes for the git project."),process.exit(1);const K=Y.split(/\r?\n/g),Z=K.find((J)=>J.indexOf($)>=0);if(!Z)console.warn(b`
      You MUST have a remote named ${$} which points to the repository you
      wish to deploy to.

      ${K.join("\n")}
    `),process.exit(1);const G=Z.split(/\s+/g)[1];if(!R1(G))console.warn(`
      You do not seem to have access to the repo listed in the package json of
      this project. Please ensure you have write access to the repo:
      ${G}
      and then try to run the release again.
    `),process.exit(1)}var p$=L(()=>{n();c();L0()});async function i$(){const $=await O("git",["rev-parse","--abbrev-ref","HEAD"]);if($===null){console.error("Failed to determine current branch.");return}return $.trim()||void 0}var n$=L(()=>{c()});var s$=async($,Y)=>{const K=await i$();if(!K)return console.warn("Could not determine current branch."),!1;if(await O("git",["checkout",`${Y}`])===null)return console.warn(`Could not checkout branch ${Y}`),!1;if(await O("git",["reset","--hard",`${$}/${Y}`])===null){if(console.warn(`Could not reset branch ${Y}`),await O("git",["checkout",`${K}`]))console.warn(`Could not return to original branch ${K}`);return!1}if(await O("git",["checkout",`${K}`])===null)return console.warn(`Could not return to original branch ${K}`),!1;return!0};var o$=L(()=>{c();n$()});import a$ from"fs-extra";import t$ from"path";async function r$(){return a$.readJSONSync(t$.resolve("package.json")).repository||{}}var e$=()=>{};var K9={};j(K9,{default:()=>Y9});import k1 from"fs-extra";import P1 from"path";async function d3(){const $=await r$(),Y=$.url;if(!$||!($.type!=="gitlab"||$.type!=="git"||$.type!=="bitbucket"||$.type!=="stash"))console.warn(`
      You MUST have a repository specified in your package json to use the
      release script. It must be of 'type: git' and have a valid ssh url to
      your git repo.

      Additionally, you MUST have a remote configured for your project of
      'origin' that matches the repo url listed in your package.json.

      Thus: "git remote -v" SHOULD output a line with
      origin <url in your package json repository field> (push)
    `),process.exit(1);const K=await O("git",["remote","-v"]);if(K===null)console.warn("Could not list remotes for the git project."),process.exit(1);const Z=K.split(/\r?\n/g);if(!Z.find((J)=>J.indexOf(i)>=0&&J.indexOf(Y)>=0))console.warn("Could not match package json repository to an origin remote in git CLI",{remoteListProcess:K,remotes:Z,ENSURE_REMOTE:i,ENSURE_REMOTE_PROJECT:Y}),process.exit(1);if(!R1(Y))console.warn(`
      You do not seem to have access to the repo listed in the package json of
      this project. Please ensure you have write access to the repo:
      ${Y}
      and then try to run the release again.
    `),process.exit(1);if(await e())console.error("You have uncommitted changes or the current state of the project can not be determined. Please commit or stash them before continuing."),process.exit(1);console.warn("Repository validation complete")}async function h3(){if(!await await M("git",["checkout","release"])){if(!await M("git",["checkout","-b","release"]))console.warn("Could not switch to the release branch. Make sure the branch exists locally."),process.exit(1)}if(!await M("git",["fetch",`${i}`]))console.warn("Could not fetch from remote servers."),process.exit(1);if(!await M("git",["reset","--hard",`${i}/dev`]))console.warn("Could not reset branch to dev"),process.exit(1);console.warn("Checked out release branch and updated to dev")}function l3(){try{const Y=k1.readFileSync(P1.resolve("RELEASE_NOTES.md"),"utf8").toLowerCase().split("\n").map((K)=>(K.match(/## (\w+)/)||[])[1]).filter(Boolean);if(Y.includes("breaking"))return"major";if(Y.includes("added"))return"minor";return"patch"}catch($){console.error("Could not determine release type after release was created"),process.exit(1)}}async function c3($){const Y=await w();if(!await M("git",["add","-A"]))console.warn("Could not ensure all fragments are added for the next commit."),process.exit(1);await E1({file:"RELEASE_NOTES.md",updatePackage:!0});const K=await w();if(Y===K)console.warn(`
      The release script did not detect any changes for a release. If you find
      this to be in error or you want to force a new release. Make some commits
      with proper release note formatted messages to trigger a release.
    `),process.exit(1);if($){if(l3()!=="patch")console.error(`
        Cannot create a release for an alternate branch that is not a simple
        patch. Features and breaking changes can ONLY be made on the main branch of
        development.
      `),process.exit(1)}const Z=await O("git",["log","-1","--pretty=%B"]);if(Z===null)console.warn("Could not read the last commit version information"),process.exit(1);const G=(Z.trim().toLowerCase().split("release ")[1]||"").trim();if(!G)console.warn("Could not determine release version from the last commit:\n\n",Z.toString(),"\n\n"),process.exit(1);if(k1.existsSync(P1.resolve("ui/release.json"))){try{const J=k1.readJSONSync(P1.resolve("ui/release.json"));J.version=G,k1.writeJSONSync(P1.resolve("ui/release.json"),J)}catch(J){console.warn("Could not update the release.json file with current library version."),process.exit(1)}if(!await M("git",["add","-A"]))console.warn("Could not ensure the release json was updated for the new version."),process.exit(1);if(!await M("git",["commit","--amend","--no-edit"]))console.warn("Could not amend the release commit to include the release json file."),process.exit(1)}if(G.includes('"'))console.warn("The update version generated is invalid as it contains invalid characters",{version:G}),process.exit(1);return console.warn("Updating version to",{version:G}),G}async function p3($){if(!await M("git",["tag","-a",$,"-m",`Release ${$}`]))console.warn("Could not make tag for git commit"),process.exit(1)}async function $9($,Y,K,Z,G){if(!await M("git",["push",G?"-f":void 0,$,`${K}:${Z}`]))console.warn(`Could not push release commit to ${$}`),process.exit(1);if(!await M("git",["push",$,Y]))console.warn("Could not push tag to the remote repository"),process.exit(1)}async function i3($,Y){if($&&$.length>0){if(!await v(b`
        The build and release was successful, would you like to release to the
        specified additional remotes?

        ${z.cyanBrightBold($.join("\n"))}
      `))return}if(!await M("git",["fetch",i]))console.warn("Could not fetch from remote servers."),process.exit(1);for(let K of $){const[Z,G,J,Q]=K.split(":");await c$(Z),await s$(i,G||"master"),await $9(Z,Y,G||"master",J||"master",Q==="force")}}async function n3($){process.env.NODE_ENV="production",await d3(),await h3(),await S1();const Y=await c3();if(await p3(Y),await $9(i,Y,"release","release",!0),await v("Would you like to run pr release?"))await l("pr",["release"]);await i3($,Y),await I1(!0)}async function Y9($){console.warn("Executing release script"),n3($)}var i="origin";var Z9=L(()=>{H0();F0();A();n();q1();C();c();L0();p$();x1();J0();o$();G1();e$();m()});var J9={};j(J9,{default:()=>G9});async function G9(){await w1()}var Q9=L(()=>{W0()});var M0={};j(M0,{default:()=>X9});import g from"fs-extra";import s3 from"ignore";import S from"path";async function o3($){const Y=g.readJSONSync(S.resolve("tsconfig.json"));if(Y.exclude=Y.exclude||[],Y.include=(Y?.include||[]).filter((Z)=>!y1.ignores(S.relative("./",Z))),g.writeJSONSync(S.resolve("tsconfig.temp.json"),Y),await E(500),$==="watch"){const Z=async()=>{console.warn("Exit TS process");try{g.removeSync(S.resolve("tsconfig.temp.json"))}catch(G){}process.exit(0)};process.on("exit",Z),process.on("SIGINT",Z),process.on("SIGUSR1",Z),process.on("SIGUSR2",Z),process.on("SIGTERM",Z),process.on("uncaughtException",Z)}if(!M("tsc",["-d",$==="watch"?"--watch":"","--incremental","--noemit","--pretty","--tsBuildInfoFile",S.resolve("node_modules/.cache/tsc/tsc.tsbuildinfo"),"--outDir",S.resolve("dist"),"--project",S.resolve("tsconfig.temp.json")]))console.warn("Failed to compile type declarations"),g.removeSync(S.resolve("tsconfig.temp.json")),process.exit(1);const K=(Y?.include||[]).filter((Z)=>!y1.ignores(S.relative("./",Z))).map((Z)=>S.resolve(Z)).filter((Z)=>g.existsSync(Z)&&!Z.includes("node_modules"));if(K.length>0){if(!M("eslint",[...K,"-c",S.resolve(".eslintrc"),"--ext",".ts","--ext",".tsx"]))console.warn("Failed eslint checks."),g.removeSync(S.resolve("tsconfig.temp.json")),process.exit(1)}g.removeSync(S.resolve("tsconfig.temp.json"))}async function X9($){await o3($)}var z9,y1;var b0=L(()=>{C();z9=S.resolve(".gitignore"),y1=s3.default();if(g.existsSync(z9))y1=y1.add(g.readFileSync(z9).toString())});var B9={};j(B9,{default:()=>W9});async function W9(){console.warn(z.yellowBrightBold("Starting server...")),await z1()}var H9=L(()=>{i1();A()});var _9={};j(_9,{default:()=>b9});import a3 from"fs-extra";import _0 from"path";async function M9($){if(!a3.existsSync($))return console.warn("Attempted to start a server but no server distribution was found at",$),!1;return await M("bun",[`${$}`]),!0}async function F9(){const $=_0.resolve("docs/index.js");return await M9($)}async function L9(){process.env.RESOURCE_PATH=_0.resolve("dist/app/client");const $=_0.resolve("dist/app/server/index.js");return await M9($)}async function b9($,Y){const{PORT:K="80"}=process.env;process.env.PORT=K;let Z=!1;switch($){case"app":Z=await L9();break;case"devops":Z=await F9();break;default:if($)console.warn("Invalid target for start script specified",$);break}if(!Z){if(Z=await L9(),Z)return;if(Z=await F9(),Z)return}}var q9=L(()=>{C()});import t3 from"fs-extra";import q0 from"path";async function D9(){const $=q0.resolve("tsconfig.json");if(!t3.existsSync($))throw new Error("Target project does not have a TSConfig");const Y=Boolean(process.env.DEBUG),K=process.env.PATTERN,Z=process.env.WATCH,G=process.env.LESS,J=q0.resolve("jest.config.js");M.silent=!0;try{if(Y)M("node",["--inspect-brk",q0.resolve("node_modules/.bin/jest"),"--runInBand",Z?"--watchAll":"","--verbose",G==="true"?"false":void 0,"--colors","--config",J,K?`--testNamePattern ${K}`:""]);else Y1(["jest",Z?"--watchAll":"","--verbose",G==="true"?"false":void 0,"--colors","--config",J,K?`--testNamePattern=${K}`:""],{excludeBunFlag:!0})}catch(Q){console.warn("Tests failed. Please look at logs to see the errors discovered")}console.warn(z.cyanBright("Tests complete"))}var N9=L(()=>{A();X0();C()});var A9={};j(A9,{default:()=>O9});async function O9(){console.warn("Running unit tests..."),await D9()}var x9=L(()=>{N9()});var T9={};j(T9,{default:()=>w9});import I9 from"fs";import U9 from"path";import V9 from"rimraf";async function w9(){const $=U9.resolve("./node_modules/.cache/"),Y=U9.resolve("./build");if(I9.existsSync($))V9.sync($),console.warn("Cache: Clean complete");else console.warn("Cache: Already clean");if(I9.existsSync(Y))V9.sync(Y),console.warn("Build: Clean complete");else console.warn("Build: Already clean");if(await M("bun",["pm","cache","rm"]))console.warn("Bun: Clean complete");else console.warn("Bun: Already clean")}var C9=L(()=>{C()});import S9 from"path";import{createRequire as r3}from"module";async function v1($,Y){const G=r3(import.meta.url).resolve($).split("node_modules"),J=G[0],Q=G[1].split(S9.sep)[1];return S9.join(J,"node_modules",Q,"node_modules",".cache",Y)}var j9=()=>{};var R9={};j(R9,{default:()=>E9});import e3 from"fs-extra";import Z1 from"path";import $4 from"url";async function Y4($,Y,K){const Z=await import("puppeteer"),G=await v1("puppeteer","pr-release"),J=await Z.launch({headless:!1,userDataDir:Z1.resolve(B1,G),defaultViewport:null}),Q=await J.newPage();console.warn("Opening project url..."),await Q.goto($);const X=await Q.evaluate(()=>document.body.getAttribute("data-project-id"));if(!X){console.warn("No project id found, User login required...");let F=!0;J.on("disconnected",()=>{if(!F)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)}),await Q.goto($),await Q.waitForFunction(()=>{const B=document?.body?.getAttribute("data-project-id");return B!==null&&B!==void 0},{timeout:0}),await Q.close(),F=!1}else await Q.close();console.warn("Project ID found:",X,"\nOpening merge request...");const W=async(F,B,D)=>{const N=await J.newPage();await N.goto(`${$}/-/merge_requests/new?${D?"utf8=%E2%9C%93&":""}merge_request%5Bsource_project_id%5D=${X}&merge_request%5Bsource_branch%5D=${encodeURIComponent(F)}&merge_request%5Btarget_project_id%5D=${X}&merge_request%5Btarget_branch%5D=${B}`),await N.waitForFunction(()=>{const q=document.querySelector("#merge_request_title");return q!==null&&q!==void 0},{timeout:0}),await N.evaluate((q)=>{let H=document.querySelector("#merge_request_title");if(H)H.value=`Release ${q}`;if(H=document.querySelector("#merge_request_description"),H)H.value=`Release ${q}`;if(H=document.querySelector("#merge_request_force_remove_source_branch"),H)H.checked=!1,H.value="0"},Y),await new Promise((q)=>{N.on("close",()=>{q(void 0),console.warn("Gitlab ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([W("release","dev"),W("release",K)]),J.close()}async function D0($,Y,K,Z){const G=await import("puppeteer"),J=await v1("puppeteer","pr-release");let Q=await G.launch({headless:!Z,userDataDir:Z1.resolve(B1,J),defaultViewport:null});const X=await Q.newPage();if(Z){console.warn("User login required...");let D=!0;Q.on("disconnected",()=>{if(!D)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)});const N="https://github.com/login";console.warn("Opening github login page: ",N),await X.goto(N),await X.waitForFunction(()=>{const q=document?.body?.getAttribute("class")?.split(" ").find((H)=>H.startsWith("logged-in"));return q!==null&&q!==void 0},{timeout:0}),D=!1}else console.warn("Opening project url: ",$),await X.goto($);console.warn("Checking for logged-in attribute on body...");const W=await X.evaluate(()=>{return console.warn("logged-in check:",document?.body?.getAttribute("class")?.split(" ").find((D)=>D.startsWith("logged-in"))),document?.body?.getAttribute("class")?.split(" ").find((D)=>D.startsWith("logged-in"))});if(console.warn("Loggin in check:",W),!W&&Z)await Q.close(),console.error("Failed to log in the user for github."),process.exit(1);else if(!W){console.warn("Logged-in not found on body, login might be needed..."),await Q.close(),D0($,Y,K,!0);return}else Q.close();const F={headless:!1,userDataDir:Z1.resolve(B1,J),defaultViewport:null};Q=await G.launch(F);const B=async(D,N)=>{const q=await Q.newPage();await q.goto(`${$}/compare/${N}...${D}`),await q.waitForFunction(()=>{const H=document.querySelector("#repo-content-pjax-container > div > div.js-details-container.Details.js-compare-pr > div > button");return H?.click(),H!==null&&H!==void 0}),await q.evaluate(async(H)=>{let I=document.querySelector("#pull_request_title");if(I)I.value=`Release ${H}`;if(I=document.querySelector('[name="pull_request[body]"]'),I)I.value=`Release ${H}`},Y),await new Promise((H)=>{q.on("close",()=>{H(void 0),console.warn("Github ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([B("release","dev"),B("release",K)]),Q.close()}async function K4($,Y,K,Z){const G=await import("puppeteer"),J=await v1("puppeteer","pr-release");let Q=await G.launch({headless:!Z,userDataDir:Z1.resolve(B1,J),defaultViewport:null});const X=await Q.newPage();if(Z){console.warn("User login required...");let D=!0;Q.on("disconnected",()=>{if(!D)return;console.warn("Browser was closed or crashed. Try the command again."),process.exit(1)});const N=$;console.warn("Opening azure repo login page: ",N),await X.goto(N),await X.waitForFunction(()=>{const q=window.sessionStorage.msameid;return q!==null&&q!==void 0},{timeout:0}),D=!1}else console.warn("Opening project url: ",$),await X.goto($);console.warn("Checking for logged-in attribute on body...");const W=await X.evaluate(()=>{return console.warn("logged-in check:",window.sessionStorage.msameid),window.sessionStorage.msameid});if(console.warn("Loggin in check:",W),!W&&Z)await Q.close(),console.error("Failed to log in the user for azure."),process.exit(1);else if(!W){console.warn("MS id not found, login might be needed..."),await Q.close(),D0($,Y,K,!0);return}else Q.close();const F={headless:!1,userDataDir:Z1.resolve(B1,J),defaultViewport:null};Q=await G.launch(F);const B=async(D,N)=>{const q=await Q.newPage();await q.goto(`${$}&sourceRef=${D}&targetRef=${N}`),await q.waitForFunction(()=>{const H=document.querySelector("button.primary");return H!==null&&H!==void 0}),await q.evaluate(async(H)=>{let I=document.querySelector('[aria-label="Enter a title"]');if(I)I.value=`Release ${H}`;if(I=document.querySelector('[aria-label="Description"]'),I)I.value=`Release ${H}`},Y),await new Promise((H)=>{q.on("close",()=>{H(void 0),console.warn("Azure project ticket process finished\n\n")})})};console.warn("\n\nWaiting for browser windows to be closed...\n\n"),await Promise.all([B("release","dev"),B("release",K)]),Q.close()}async function E9($,Y,K="master",...Z){if(!(new Set(["gitlab","git","github","azure"])).has(Y))console.error(`Unsupported repo type: ${Y}`),process.exit(1);if(await e())console.error("You have uncommitted changes or the current state of the project can not be determined. Please commit or stash them before continuing."),process.exit(1);const Q=e3.readJsonSync(Z1.resolve("package.json")).version;switch(Y){case"gitlab":await Y4($,Q,K);break;case"git":case"github":await D0($,Q,K);break;case"azure":await K4($,Q,K);break;default:console.warn("No supported repo type found")}}var B1;var k9=L(()=>{j9();x1();B1=$4.fileURLToPath(new URL(".",import.meta.url))});A();import*as Z4 from"commander";import G4 from"inquirer-autocomplete-prompt";import J4 from"inquirer";import P9 from"path";import Q4 from"yargs";A();n();import T0 from"fs-extra";import C0 from"path";A();import x0 from"fs";import I0 from"path";function A0($){const Y=$.split(/\r?\n/),K={};let Z=null,G=null;return Y.forEach((J)=>{if(J=J.trim(),J===""||J.startsWith("#"))return;if(J.endsWith("{")){Z=J.split(/\s+/)[0],K[Z]={};return}if(J==="}"){Z=null,G=null;return}const Q=J.match(/^([\w.]+)\s*=\s*(.*)$/);if(Q){const W=Q[1];let F=Q[2];if(!isNaN(parseFloat(F)))F=parseFloat(F);else if(F==="true")F=!0;else if(F==="false")F=!1;if(G)K[Z??"null"][G][W]=F;else if(Z)K[Z][W]=F;else K[W]=F;return}const X=J.match(/^([\w.]+)\.([\w.]+)\s*=\s*(.*)$/);if(X){const W=X[1],F=X[2],B=X[3];if(!K[W])K[W]={};if(!K[W][F])K[W][F]={};K[W][F][B]=null,Z=W,G=F;return}console.error(`Unrecognized line: ${J}`)}),K}function U0($){try{if(!x0.existsSync(I0.resolve(".env")))return;const Y=x0.readFileSync(I0.resolve($||".env"),"utf8"),K=A0(Y);Object.entries(K).forEach(([Z,G])=>{if(typeof G==="string")process.env[Z]=G;else if(typeof G==="number")process.env[Z]=G.toString();else if(typeof G==="boolean")process.env[Z]=G.toString()})}catch(Y){if(Y instanceof Error)console.error(z.red("Error reading .env file:\n",z.yellow(Y.stack||Y.message)))}}G1();import p9 from"fs-extra";import i9 from"inquirer";import{stripIndent as n9}from"common-tags";async function w0($,Y,K,Z,G,J){let Q=J||!1;if(p9.existsSync($)){const{result:X}=await i9.prompt([{type:"confirm",name:"result",message:n9`${Y}`,default:J}]);if(X)K($),G?.($);Q=X}else K($),Z?.($);return Q}async function s9(){const $=(await import(C0.resolve("env.config.ts"))).default;if(!$)throw new Error("No env.config.ts file found.");if(!Array.isArray($))console.error("env.config.ts is not formatted correctly. Please follow the correct type convention.");return $}async function g1($){U0();try{const Y=await s9(),K=[],Z=[];if(Y.forEach((G)=>{if(!G)return;if(G.required){if(!process.env[G.name])K.push(b`
              Missing: ${G.name}\nDesription: ${G.description}
            `)}else if(!process.env[G.name]&&G.warn!==!1)Z.push(b`
              Missing: ${G.name}\nDesription: ${G.description}
            `)}),Z.length>0)console.warn(z.yellowBrightBold("The following environment variables are recommended but missing from your environment:\n")),console.warn(z.yellowBright(b`
          ${Z.join("\n")}
        `));if(K.length>0)console.error(z.redBrightBold("The following environment variables are required but missing from your environment:\n")),console.error(z.redBright(b`
          ${K.join("\n")}
        `));if(K.length>0){if($){if(await v(b`
          There seems to be some missing environment variables. Would you like
          to generate a .env file with the default values specified in the
          env.config file?
        `)){const J=[];for(let F of Y)J.push([F.name,V0(F.default)?F.default:R(F.default)?await F.default():void 0]);const Q=J.filter((F)=>F[1]).map((F)=>`${F[0]}=${F[1]}`).join("\n");if(!Q)console.warn(b`
              There are no defaults available for this env.config. So we can not
              generate an env file you. Please review the env.config.ts file and
              properly set the default values for the required environment
              variables.
            `);const X=C0.resolve(".env");if(!await w0(X,b`
              There appears to already be a .env file.
              Would you like to add the missing defaults to it?
            `,()=>{},()=>T0.writeFile(X,Q),()=>{T0.appendFileSync(X,`\n${Q}`)},!1))console.error("Did not write the .env file. Please correct the env and try again."),process.exit(1);return console.warn("Attempting to build the env again and continue with the command..."),g1(!1)}}process.exit(1)}}catch(Y){console.warn(b`
      No ${z.cyanBrightBold("env.config.ts")} file found. Environment will not be validated.
    `)}}n();import a9 from"fs-extra";import E0 from"inquirer";import t9 from"path";C();s();async function o($,Y,K){const Z=await k(),G=$.filter(R);return await M(Z[0],["i",K?"--no-save":null,Y?`-${Y}`:null,...G])}C();import o9 from"fuzzy";var S0=($)=>async(Y,K)=>{let Z=[];if($ instanceof Set)Z=Array.from($);else Z=$;return o9.filter(K||"",Z).map((G)=>G.string)};s();async function j0($){try{return await import($),!0}catch(Y){return console.error("Requested package is not available in this current project:",$),!1}}async function R0($,Y){const K=$||["puppeteer"];for(let Z of K)if(console.warn("Checking on dependency availability:",Z),!await j0(Z)){let J=Y;if(!J)J=(await E0.prompt([{type:"autocomplete",name:"resolution",message:`How do you want to resolve the missing package "${Z}":`,source:S0(["Install once to current project","Install in parent directory (Makes package available to all peer projects)","Do Nothing (this will end this current process as the package is required)"])}])).resolution;switch(J){case"Install to current project":await o([Z],"E");break;case"Install once to current project":o([Z],"E",!0);break;case"Install in parent directory (Makes package available to all peer projects)":{const Q=process.cwd();process.chdir("..");const X=await k();if(!a9.existsSync(t9.resolve("package.json")))M(X[0],["init","-y"]);await o([Z],"E"),process.chdir(Q),await E(100);break}default:process.exit(1)}}}function N0(){return m1.debug=T.debug,m1.verbose=T.verbose,m1.pattern=T.pattern,m1}async function M4(){await g1(!0),T.parse(process.argv)}J4.registerPrompt("autocomplete",G4);var{Command:z4}=Z4,T=new z4,m1={};T.version("0.0.1");T.option("-v, --verbose","Outputs more detailed information during crashes.");T.option("--debug [param]",b`
    Provides debugging contextual information various commands might use to
    aid in developing Devops.
  `);T.option("-p, --pattern [param]",b`
    Provides a pattern for certain operations to utilize. This is primarily
    used by unit tests to filter tests to specified tests.
  `);var y9=T.command("dev").description(b`
    These are the commands associated with starting up developer environments
    for various project types or portions of a project.
  `);y9.command("vite").description(b`
      Starts up a developer environment that performs incremental builds while
      developing within the lib and app folders. Uses vite and vite
      config.
    `).action(async()=>{(await Promise.resolve().then(() => (d0(),u0))).default().catch(($)=>{console.warn("dev-vite process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});y9.command("storybook").option("-i, --include <include...>","Additional storybook modules to load into storybook. These are the names of properly formatted dependencies installed into node_modules.").description(b`
      Starts a storybook instance for developing the UI components of the
      project. This makes the "ui/stories" folder in the project the expected
      development point.
    `).action(async({include:$})=>{(await Promise.resolve().then(() => (a1(),o1))).default("",$,P9.resolve(process.cwd()),N0()).catch((Y)=>{console.warn("storybook process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var X4=T.command("storybook");X4.command("run").option("-i, --include <include...>","Additional storybook modules to load into storybook. These are the names of properly formatted dependencies installed into node_modules.").description(b`
      Starts a storybook instance for developing the UI components of the
      project. This makes the "ui/stories" folder in the project the expected
      development point.
    `).action(async({include:$})=>{(await Promise.resolve().then(() => (a1(),o1))).default("",$,P9.resolve(process.cwd()),N0()).catch((Y)=>{console.warn("storybook process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});T.command("url [uri...]").description(b`
      Simple command to open a specified URL in the browser.
    `).action(async($)=>{(await Promise.resolve().then(() => (L$(),F$))).default($).catch((Y)=>{console.warn("url process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var H1=T.command("release").description(b`
    These commands are used for facilitating distribution releases of
    applications. This includes tools for building th dist folder fragments,
    viewing the expected release notes, and actually performing a complete
    release cycle.
  `);H1.command("deploy [add-remote...]").description(b`
      Performs actions necessary to update the distribution of the project.
      This will automatically update release notes, tag the release, and
      commit and push to a 'release' branch which will be ready for merging
      into master and dev.

      Specify additional remotes to deploy to via the add-remote option.
      This will deploy the release to additional remotes (AFTER all other normal
      deploy operations complete). This value is the NAME of the remote as it
      appears when you perform a "git remote -v" command.

      You can specify a specific target branch via a colon: remote:branch
      Otherwise, this will use the same main branch as configured for this
      project.
    `).action(async($)=>{o([]),(await Promise.resolve().then(() => (Z9(),K9))).default($).catch((Y)=>{console.warn("release-deploy process exited unexpectedly\n",Y.stack||Y.message),process.exit(1)})});H1.command("types").description(b`
      Updates JUST the types in the dist folder. These are the same types
      generated when building a release.
    `).action(async()=>{(await Promise.resolve().then(() => (Q9(),J9))).default().catch(($)=>{console.warn("release-types process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});H1.command("view").description(b`
      This runs the release-view script. For this case, it will only display
      the release notes in the console. Actual generated release notes are a
      part of the release process.
    `).action(async()=>{(await Promise.resolve().then(() => (b0(),M0))).default("").then(async()=>{console.warn(z.cyanBrightBold("TS check passed, generating notes...")),(await Promise.resolve().then(() => (F0(),l$))).default().catch(($)=>{console.warn("release-notes process exited unexpectedly",$.stack||$.message),process.exit(1)})}).catch(($)=>{console.warn(z.redBrightBold(b`
              Failed TS check. Release notes will not be produced until all TS
              errors are resolved.
            `)),console.warn($.stack||$.message),process.exit(1)})});H1.command("build").description(b`
      This runs the release-build script. This generates all of the release
      fragments. This should ONLY be used for testing and experimenting. Actual
      release fragments should be properly created and deployed using the
      release deploy command.
    `).action(async()=>{(await Promise.resolve().then(() => (H0(),f$))).default().catch(($)=>{console.warn("release-deploy process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});var W4=H1.command("start").description(b`
      This starts up released related processes. This includes things like
      starting up the dev server without any additional builds or auto
      configuration for development.
    `);W4.command("server").description(b`
      Starts up the app server without any additional builds etc. Use the
      environments:

        BUILD_MODE: Targets an env to run the server for.
        RESOURCE_PATH: The path to the static files to serve.
    `).action(async()=>{(await Promise.resolve().then(() => (H9(),B9))).default().catch(($)=>{console.warn("release-start-server process exited unexpectedly\n",$.stack||$.message),process.exit(1)})});T.command("start [target]").description(b`
      This fires up a server to make any static content available for being
      served.
      There are a few options for what content will be served by this script:

      - The web app
      - Devops API

      The start script will automatically pick the web app over the devops
      files, but you can specify a target if you have a devops API and a web
      app:

      - app
      - devops
    `).action(async($)=>{(await Promise.resolve().then(() => (q9(),_9))).default($,N0()).catch((Y)=>{console.warn("start process exited unexpectedly"),console.warn(Y.stack||Y.message),process.exit(1)})});var B4=T.command("test").description(b`
    These commands are used for running tests. This includes tools for
    running unit tests a single time or in a watch mode.

    Use the environment variables for modifying behavior:

    ${z.yellowBrightBold("PATTERN")} - This causes the tests to only run on
    files that match the pattern

    ${z.yellowBrightBold("LESS")} - This removes the verbose output list of
    all tests ran
  `);B4.command("run").description(b`
      Runs all unit tests in the unit-test folder once.
    `).action(async()=>{(await Promise.resolve().then(() => (x9(),A9))).default().catch(($)=>{console.warn("test-run process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var H4=T.command("clean").description(b`
    Common cleaning tools for various fragments within the project.
  `);H4.command("cache").description(b`
      Cleans out build and cache files to help ensure a complete rebuild takes
      place.
    `).action(async()=>{(await Promise.resolve().then(() => (C9(),T9))).default().catch(($)=>{console.warn("clean-cache process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var F4=T.command("ts").description(b`
    These commands are used for running typescript. This includes tools for
    running typescript compilation a single time or in a watch mode.
  `);F4.command("run").description(b`
      Runs typescript compilation to check for errors. Does NOT emit files, thus
      is a good mechanism for checking a build before running a release.
    `).action(async()=>{(await Promise.resolve().then(() => (b0(),M0))).default("").catch(($)=>{console.warn("ts process exited unexpectedly"),console.warn($.stack||$.message),process.exit(1)})});var L4=T.command("pr").option("--repoUrl <value>",b`
      The https URL to the repo to make the PR into
    `).option("--repoType <value>",b`
    The repository type to make the PR into. Supported types are: git, gitlab
  `).option("--masterBranch <value>",b`
    This indicates which branch is the master/main of the repository.
  `);L4.command("release").description(b`
      This creates two PRs that merges the current remote release branch into
      the remote dev and master branches.
    `).action(async()=>{const{repoUrl:$,repoType:Y,masterBranch:K}=Q4(process.argv).argv;if(!$||!Y||!K)console.warn("You must specify both --repoUrl and --repoType to use this command"),process.exit(1);await R0().catch(()=>process.exit(1)),console.warn("Dependency checks passed, continuing..."),(await Promise.resolve().then(() => (k9(),R9))).default($,Y,K).catch((Z)=>{console.warn("pr-release process exited unexpectedly"),console.warn(Z.stack||Z.message),process.exit(1)})});M4();

//# debugId=C046D2F4AA29440564756E2164756E21
//# sourceMappingURL=data:application/json;base64,
