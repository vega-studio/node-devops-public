// @bun
import B from"path";import*as H from"change-case";import F from"fs-extra";async function G(q,A){const i=[];return q.components.forEach((z)=>{if(z.includes("-layout.tsx"))if(A)i.push(z);else i.push(B.basename(z,B.extname(z)||""))}),i.push("None..."),i}var M=async(q)=>{let A=[];return{defaultTargetPath:B.resolve("./"),fileMap:[["./templates/page.template","./app/client/pages/${{page: kebab}}/${{page: kebab}}.page.tsx"],["./templates/scss.template","./app/client/pages/${{page: kebab}}/${{page: kebab}}.page.scss"]],templateParams:{layoutImport:" ",componentImport:" ",component:" "},paramPrompts:async()=>{return{page:"Enter a name for the page (Exclude the word 'page' in the name):",layout:{message:"Start typing to select the layout to utilize for the page:",default:await G(q),onValue:async(i)=>{if(i!=="None..."){if((await q.lib.prompt.promptSelect("Should this attempt to embed detected used components in the layout?",["yes","no"]))?.toLowerCase()==="yes"){const b=(await G(q,!0)).find((w)=>w.includes(i));if(b&&F.existsSync(b)){const w=await F.readFile(b,"utf8"),E=Array.from(w.matchAll(/groups\.get\((.+)\)/g)).map((I)=>I[1]);if(E.length>0)A=E;else console.error("No components detected in layout:",b),console.error(q.lib.util.description`
                      The layout needs to use groupReactChildren and have calls like group.get(Component)
                      for this tool to pick up those in use.
                    `)}else console.error("Unable to find layout source file specified:",b),process.exit(1)}}return i}}}},transformToken:(i,z,D,b)=>{if(i[0]==="layoutImport"){const w=b.layout;if(w!==void 0&&w!=="None...")return`import { ${H.pascalCase(w)} } from "../../../../ui/index.js";`}if(i[0]==="componentImport"&&A.length>0)return`import {\n  ${A.join(",\n  ")}\n} from "../../../../ui/index.js";`;if(i[0]==="component")return`${A.map((w)=>`<${w} />`).join("\n        ")}`;if(i[0]==="layout"){if(z==="None...")return"div"}return D}}};export{M as default};
