// @bun
import B from"path";import*as H from"change-case";import E from"fs-extra";var M=async(z)=>{let A=[];async function D(i){const w=[];return z.components.forEach((q)=>{if(q.includes("-layout.tsx"))if(i)w.push(q);else w.push(B.basename(q,B.extname(q)||""))}),w.push("None..."),w}return{defaultTargetPath:B.resolve("./"),fileMap:[["./templates/page.template","./app/client/pages/${{page: kebab}}/${{page: kebab}}.page.tsx"],["./templates/scss.template","./app/client/pages/${{page: kebab}}/${{page: kebab}}.page.scss"]],templateParams:{layoutImport:" ",componentImport:" ",component:" "},paramPrompts:async()=>{return{page:{message:"Enter a name for the page (Exclude the word 'page' in the name, leave blank to select from a layout name):",default:"",onValue:async(i)=>{if(i=i?.trim(),!i){const w=(await D()).map((q)=>q.split("-layout")[0]).filter((q)=>{return!E.existsSync(B.resolve(`./app/client/pages/${q}`))});while(!i)i=await z.lib.prompt.promptSuggestions("Select a page name based on available layouts:",w)||""}while(i.toLowerCase().includes("page"))i=await z.lib.prompt.promptTextInput("Error: The name you entered contains the word 'page'.\nPlease enter a name that excludes the word 'page' as the page will be a .page.tsx file:");return i}},layout:{message:"Start typing to select the layout to utilize for the page:",default:await D(),onValue:async(i)=>{if(i!=="None..."){if((await z.lib.prompt.promptSelect("Should this attempt to embed detected used components in the layout?",["yes","no"]))?.toLowerCase()==="yes"){const b=(await D(!0)).find((F)=>F.includes(i));if(b&&E.existsSync(b)){const F=await E.readFile(b,"utf8"),G=Array.from(F.matchAll(/groups\.get\((.+)\)/g)).map((I)=>I[1]);if(G.length>0)A=G;else console.error("No components detected in layout:",b),console.error(z.lib.util.description`
                      The layout needs to use groupReactChildren and have calls like group.get(Component)
                      for this tool to pick up those in use.
                    `)}else console.error("Unable to find layout source file specified:",b),process.exit(1)}}return i}}}},transformToken:(i,w,q,b)=>{if(i[0]==="layoutImport"){const F=b.layout;if(F!==void 0&&F!=="None...")return`import { ${H.pascalCase(F)} } from "../../../../ui/index.js";`}if(i[0]==="componentImport"&&A.length>0)return`import {\n  ${A.join(",\n  ")}\n} from "../../../../ui/index.js";`;if(i[0]==="component")return`${A.map((F)=>`<${F} />`).join("\n        ")}`;if(i[0]==="layout"){if(w==="None...")return"div"}return q}}};export{M as default};
