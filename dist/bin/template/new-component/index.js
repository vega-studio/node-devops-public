// @bun
import z from"path";import A from"fs-extra";var F=async(G)=>{const{util:{changecase:D,openFile:M,description:O},targetProject:{targetProjectPackage:Q},component:{isComponentSelections:R,generateCategory:U,makeComponentSelections:Z,checkComponentStructure:_},prompt:{promptTextInput:J}}=G.lib;let K=!1;const V=await Q(),L=new Set;G.components.forEach((q)=>L.add(D.pascalCase(z.basename(q,z.extname(q)))));async function W(q,v){const S=D.kebabCase(v.component),X=z.resolve(q.componentsPath,v.category,S,`${S}.tsx`),E=z.resolve(X,"../../index.ts");if(!A.existsSync(E))console.warn(O`
      Not found: ${E}
      A parent barrel file within the component category was not found.
      One will be created.
    `),A.writeFileSync(E,"",{encoding:"utf-8"});let H=A.readFileSync(E,{encoding:"utf-8"});H=H.split(`export * from "./${S}/${S}.js";`).map((Y)=>Y.trim()).join("\n"),H=`${H.trim()}\nexport * from "./${S}/${S}.js";\n`,A.writeFileSync(E,`${H.trim()}\n`,{encoding:"utf-8"}),await M(E)}return{defaultTargetPath:z.resolve("./"),fileMap:[["./templates/component.template","./ui/components/${{category: kebab}}/${{component: kebab}}/${{component: kebab}}.tsx"],["./templates/scss.template","./ui/components/${{category: kebab}}/${{component: kebab}}/${{component: kebab}}.scss"],["./templates/story.template","./ui/stories/components/${{category: kebab}}/${{component: kebab}}.stories.tsx"],["./templates/props.template","./ui/stories/data/${{category: kebab}}/${{component: kebab}}-props.tsx"]],templateParams:{project:V.name},paramPrompts:async()=>{const q=A.readdirSync(G.componentsPaths.componentsPath).filter((v)=>A.statSync(z.resolve(G.componentsPaths.componentsPath,v)).isDirectory());return{component:{message:"Type a name for the component:",default:"",onValue:async(v)=>{while(L.has(D.pascalCase(v)))console.error("The component name you provided already exists."),v=await J("Type a name for the component:");return v=D.pascalCase(v),v}},category:{message:"Start typing to select the directory to add your new component:",default:q.concat(["New..."]),onValue:async(v)=>{if(v==="New..."){v=await J("Type a name for the new directory:"),v=D.kebabCase(v);while(A.existsSync(z.resolve(G.componentsPaths.componentsPath,v)))console.error("The category/directory you provided already exists."),v=await J("Type a name for a new directory/category:"),v=D.kebabCase(v);K=!0}return v}}}},syncComplete:async(q,v,S)=>{if(R(S)){if(K)await U(v.componentsPaths,S);W(v.componentsPaths,S)}}}};export{F as default};
